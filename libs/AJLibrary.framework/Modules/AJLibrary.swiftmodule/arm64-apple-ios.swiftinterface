// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name AJLibrary
import AFNetworking
@_exported import AJLibrary
import AVFoundation
import AVKit
import Alamofire
import AliyunOSSiOS
import AudioToolbox
import AuthenticationServices
import SystemConfiguration.CaptiveNetwork
import CocoaAsyncSocket
import CoreImage
import CoreLocation
import CoreMedia
import CoreTelephony
import FCUUID
import FirebaseCore
import FirebaseMessaging
import Foundation
import HandyJSON
import LocalAuthentication
import Lottie
import MBProgressHUD
import MJRefresh
import MapKit
import Material
import MediaPlayer
import MessageUI
import NetworkExtension
import ObjectiveC
import OpenAL
import Photos
import SDVersion
import SDWebImage
import SnapKit
import SocketRocket
import Sodium
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import XCGLogger
import ZipArchive
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import mobileffmpeg
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CustomWebViewController : AJLibrary.WebViewController, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) public func PopPrevious()
  @objc @_Concurrency.MainActor(unsafe) public func GoBack()
  @objc @_Concurrency.MainActor(unsafe) public func PopVc()
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) override public init(urlRequest: Foundation.URLRequest, configuration: WebKit.WKWebViewConfiguration = super, activities: [UIKit.UIActivity]? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UIFlatButton : Material.FlatButton {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UIContainedButton : UIKit.UIButton {
  @objc @_Concurrency.MainActor(unsafe) public init(_ title: Swift.String?, target: Any?, action: ObjectiveC.Selector?)
  @_Concurrency.MainActor(unsafe) open var isCustomEnabled: Swift.Bool {
    get
    set
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UIBlueBorderButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public init(_ title: Swift.String?, target: Any?, action: ObjectiveC.Selector?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UIImageButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func titleRect(forContentRect contentRect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func imageRect(forContentRect contentRect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UITabButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func titleRect(forContentRect contentRect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func imageRect(forContentRect contentRect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UIIconButton : UIKit.UIButton {
  @objc @_Concurrency.MainActor(unsafe) public init(_ normalImageName: Swift.String, selectedImageName: Swift.String, target: Any?, action: ObjectiveC.Selector?)
  @objc @_Concurrency.MainActor(unsafe) public init(_ normalImageName: Swift.String, selectedImageName: Swift.String, target: Any?, TouchDownaction: ObjectiveC.Selector?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func imageRect(forContentRect contentRect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @objc deinit
}
extension AJLibrary.UIContainedButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
}
extension Swift.Int {
  public var toNumber: Foundation.NSNumber {
    get
  }
}
extension Swift.UInt {
  public var toNumber: Foundation.NSNumber {
    get
  }
}
public enum NetHTTPMethod : Swift.String {
  case get
  case post
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol NetDecodable : HandyJSON.HandyJSON {
  static func parse(json: Any) -> ((any AJLibrary.NetDecodable)?, AJLibrary.ErrorModel?)
}
extension AJLibrary.NetDecodable {
  public static func parse(json: Any) -> ((any AJLibrary.NetDecodable)?, AJLibrary.ErrorModel?)
  public static func parseArr(json: Any) -> ([any AJLibrary.NetDecodable]?, AJLibrary.ErrorModel?)
}
public protocol NetRequest {
  var host: Swift.String { get set }
  var path: Swift.String { get }
  var method: AJLibrary.NetHTTPMethod { get }
  var parameter: [Swift.String : Any]? { get }
  var query: [Swift.String : Swift.String] { get }
  var domainHost: Swift.String? { get }
  associatedtype Response : AJLibrary.NetDecodable
}
public let kLoginAuthData: Swift.String
public enum LoginType : Swift.String {
  case moblie
  case email
  case apple
  case wechat
  case sdk
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Login : ObjectiveC.NSObject {
  @objc public class func isLogin() -> Swift.Bool
  public class func doLogin(_ username: Swift.String, password: Swift.String)
  public class func save(_ username: Swift.String, password: Swift.String)
  public class func doLogin(_ username: Swift.String)
  @objc public class func doLogout()
  @objc public class func curUsername() -> Swift.String?
  public class func accountTypeFolderName(_ loginType: AJLibrary.LoginType) -> Swift.String?
  @objc public class func accountUsername() -> Swift.String?
  @objc public class func curUid() -> Swift.String?
  public class func curPassword() -> Swift.String?
  public class func saveOauth(_ oauthModel: AJLibrary.OauthModel)
  @objc public class func userOauth() -> AJLibrary.OauthModel?
  public class func isNewAccount(_ username: Swift.String) -> Swift.Bool
  public class func clearCurrentUser()
  public class func saveLoginCountry(_ country: AJLibrary.CountryModel, _ name: Swift.String)
  public class func loginCountry(_ name: Swift.String) -> AJLibrary.CountryModel?
  public class func curIdentType() -> Swift.String
  public class func loginStringType(_ type: AJLibrary.LoginType) -> Swift.String
  public class func loginStringDetailType(_ type: AJLibrary.LoginType) -> Swift.String
  public class func appleAlly(_ loginType: AJLibrary.LoginType = getAccountLoginType()) -> AJLibrary.AllyModel?
  public class func getAccountLoginType() -> AJLibrary.LoginType
  public class func saveUsername(_ username: Swift.String)
  @objc public class func saveUacNode(_ uacNodeKey: Swift.String, model: AJLibrary.AccessNodeModel)
  public class func saveCurrentUacNodeKey(_ uacNodeKey: Swift.String)
  public class func currentUacNodeAccountKey() -> Swift.String
  public class func saveSDKallyToken(_ allyToken: Swift.String)
  public class func currentSDKallyToken() -> Swift.String
  @objc public class func getUacNode(_ uacNodeKey: Swift.String) -> AJLibrary.AccessNodeModel?
  @objc public class func saveWXLoginUnion(_ unionid: Swift.String)
  @objc public class func wxLoginUnion() -> Swift.String?
  @objc public class func delUacNode(_ uacNodeKey: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public typealias ShareUsernameEditBlock = (_ username: Swift.String?, _ isValid: Swift.Bool) -> ()
@objc public class ErrorModel : ObjectiveC.NSObject {
  @objc public var eCode: Swift.Int
  @objc public var eMessage: Swift.String?
  public init(_ eCode: Swift.Int?, eMessage: Swift.String?)
  @objc deinit
}
public enum ReceiveStatus : Swift.String {
  case WaitingReceive
  case ReceiveSuccess
  case Invalid
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class ShareCameraModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ShareSendReceiverExtModel : AJLibrary.ResultModel {
  @objc public var deviceType: Swift.String?
  @objc public var prodName: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ShareSendReceiverModel : AJLibrary.ResultModel {
  @objc public var createTs: Swift.String?
  @objc public var member: Swift.String?
  @objc public var deviceId: Swift.String?
  @objc public var sendStatus: Swift.String?
  @objc public var senderName: Swift.String?
  @objc public var senderUid: Swift.String?
  @objc public var senderType: Swift.String?
  @objc public var rcvStatus: Swift.String?
  @objc public var receiverName: Swift.String?
  @objc public var receiverUid: Swift.String?
  @objc public var receiverType: Swift.String?
  @objc public var url: Swift.String?
  @objc public var inviteCode: Swift.String?
  @objc public var optStatus: Swift.String?
  @objc public var validTs: Swift.String?
  @objc public var ext: AJLibrary.ShareSendReceiverExtModel?
  public func inviteTime() -> Swift.String?
  public func receiveStatus() -> AJLibrary.ReceiveStatus
  public func senderStatus() -> AJLibrary.InviteStatus
  public func isShareActivate() -> Swift.Bool
  public func receiverUserAccountType() -> AJLibrary.LoginType
  public func inviteTitle() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class LanguageManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: AJLibrary.LanguageManager
  @objc open var languageBundle: Foundation.Bundle?
  public var supportLanguagesArray: [AJLibrary.SupportLanguage]
  @objc public func currentLanguage() -> Swift.String
  public func userLocalLanguageSetting() -> Swift.String?
  public func removeUserLocalLanguageSetting()
  open func changeToLanguage(_ language: AJLibrary.SupportLanguageOption, saveToLocal: Swift.Bool, complete: (() -> ())?)
  public func setSupportLanguages(_ languages: [AJLibrary.SupportLanguage])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FwVersionUpgradeModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
public protocol TwicketSegmentedControlDelegate : AnyObject {
  func didSelect(_ segmentIndex: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TwicketSegmentedControl : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public static let height: CoreFoundation.CGFloat
  public struct Constants {
  }
  @_Concurrency.MainActor(unsafe) weak open var delegate: (any AJLibrary.TwicketSegmentedControlDelegate)?
  @_Concurrency.MainActor(unsafe) open var defaultTextColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var highlightTextColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var segmentsBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var sliderBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var font: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isSliderShadowHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var selectedSegmentIndex: Swift.Int
  @_Concurrency.MainActor(unsafe) public var numberOfSegments: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) public var segmentWidth: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var containerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var backgroundView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setSegmentItems(_ segments: [Swift.String])
  @_Concurrency.MainActor(unsafe) open func configureViews()
  @_Concurrency.MainActor(unsafe) open func createLabel(with text: Swift.String, at index: Swift.Int, selected: Swift.Bool) -> UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) open func didPan(panGesture: UIKit.UIPanGestureRecognizer)
  @_Concurrency.MainActor(unsafe) open func move(to index: Swift.Int)
  @_Concurrency.MainActor(unsafe) open func segmentIndex(for point: CoreFoundation.CGPoint) -> Swift.Int
  @_Concurrency.MainActor(unsafe) open func center(at index: Swift.Int) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc public protocol TimePickerDelegate {
  @objc optional func renewTime(_ newTime: Swift.String)
  @objc optional func renewTime(_ newTime: Swift.String, tag: Swift.Int)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UITimePicker : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any AJLibrary.TimePickerDelegate)?
  @_Concurrency.MainActor(unsafe) public var renewTimeBlock: ((Swift.String) -> ())?
  @objc @_Concurrency.MainActor(unsafe) public func timeChange()
  @objc @_Concurrency.MainActor(unsafe) public func show()
  @_Concurrency.MainActor(unsafe) public func initTime(_ date: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public init(date: Swift.String)
  @_Concurrency.MainActor(unsafe) public init(date: Swift.String, tag: Swift.Int)
  @objc deinit
}
public typealias CompletionHandler<T> = (T.Response?, AJLibrary.ErrorModel?) -> Swift.Void where T : AJLibrary.NetRequest
public typealias ArrNetCompletionHandler<T> = ([T.Response]?, AJLibrary.ErrorModel?) -> Swift.Void where T : AJLibrary.NetRequest
@objc @_inheritsConvenienceInitializers open class WVTableGroup : ObjectiveC.NSObject {
  public var header: Swift.String?
  public var footer: Swift.String?
  public var fHighlightStr: Swift.String?
  public var fHighlightColor: UIKit.UIColor?
  public var footerBtn: UIKit.UIButton?
  public var items: [AJLibrary.WVTableItem]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class WVSubTableCell : AJLibrary.WVTableCell {
  @_Concurrency.MainActor(unsafe) override open class func cellID() -> Swift.String
  @_Concurrency.MainActor(unsafe) override open class func cellHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) override open func loadUIs()
  @_Concurrency.MainActor(unsafe) override public func setTitleLabel()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public let SystemMsgTableViewCellIdentifier: Swift.String
public let FetchInfosApi: Swift.String
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DeviceNetManager : AJLibrary.BaseNetManager {
  @objc public static let sharedInstance: AJLibrary.DeviceNetManager
  public func fetchCamerasInfos(deviceIds: [Swift.String], deviceTypesDic: [Swift.String : AJLibrary.DeviceModeType], scopes: [Swift.String] = [], complete: @escaping (AJLibrary.CamerasModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func fetchDevicesInfos(deviceIds: [Swift.String], params: [Swift.String : Any], complete: @escaping (AJLibrary.CamerasModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func setAliasName(deviceId: Swift.String, aliasName: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func setLabelConfigName(deviceId: Swift.String, aliasName: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func setMoveMonitorSetting(_ deviceId: Swift.String, enable: Swift.String, susceptiveness: Swift.String, genAlarmThumb: Swift.String, wholeDayEnable: Swift.String, wholeStartTime: Swift.String, wholeEndTime: Swift.String, wholeWeekDays: [Swift.String], enable1: Swift.String, startTime1: Swift.String, endTime1: Swift.String, weekDays1: [Swift.String], enable2: Swift.String, startTime2: Swift.String, endTime2: Swift.String, weekDays2: [Swift.String], complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func nightVisionSetting(_ deviceId: Swift.String, nightMode: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func microphoneSetting(_ deviceId: Swift.String, micEnable: Swift.String, speakerVolume: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func orientationSetting(_ deviceId: Swift.String, orientationValue: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func localStorageSetting(_ deviceId: Swift.String, enable: Swift.String, nasPath: Swift.String, playUrlRoot: Swift.String, quality: Swift.String, storageType: Swift.String, triggerMode: Swift.String, writeMode: Swift.String, wholeDayEnable: Swift.String, wholeStartTime: Swift.String, wholeEndTime: Swift.String, wholeWeekDays: [Swift.String], wholeFormat: Swift.String, enable1: Swift.String, startTime1: Swift.String, endTime1: Swift.String, weekDays1: [Swift.String], format1: Swift.String, enable2: Swift.String, startTime2: Swift.String, endTime2: Swift.String, weekDays2: [Swift.String], format2: Swift.String, ecoRecordDurationLimit: Swift.Int, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func cloudStorageSetting(_ deviceId: Swift.String, enable: Swift.String, wholeDayEnable: Swift.String, wholeStartTime: Swift.String, wholeEndTime: Swift.String, wholeWeekDays: [Swift.String], enable1: Swift.String, startTime1: Swift.String, endTime1: Swift.String, weekDays1: [Swift.String], enable2: Swift.String, startTime2: Swift.String, endTime2: Swift.String, weekDays2: [Swift.String], expireAt: Swift.String, ecoRecordDurationLimit: Swift.Int, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func setCameraSnapshot(_ deviceId: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func getUploadToken(_ deviceId: Swift.String, resourceType: Swift.String, complete: @escaping (AJLibrary.RscUploadTokenModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func uploadNotify(_ deviceId: Swift.String, resourceType: Swift.String, resourceId: Swift.String, fileName: Swift.String, viewAngle: Swift.String, context: Swift.String, storageMode: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func getSecToken(_ deviceId: Swift.String, reqType: Swift.String, quality: Swift.String, complete: @escaping (AJLibrary.LiveSecToken?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func ptzControl(_ deviceId: Swift.String, action: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func viewAngleConfig(_ deviceId: Swift.String, viewAngle: Swift.String, name: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func viewAngleRemove(_ deviceId: Swift.String, viewAngles: [Swift.String], complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func viewAngleTurn(_ deviceId: Swift.String, viewAngle: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func removeCamera(_ deviceId: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func restartCamera(_ deviceId: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func resetCamera(_ deviceId: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func setTimezone(_ deviceId: Swift.String, tzName: Swift.String, tzValue: Swift.String, autoAdjust: Swift.String, tzDistrict: Swift.String?, complete: @escaping (AJLibrary.TimeConfigModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func firmwareUpgrade(_ deviceId: Swift.String, version: Swift.String, complete: @escaping (AJLibrary.FwVersionUpgradeModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func syncCloudStorPlan(_ deviceId: Swift.String, params: [Swift.String : Any], complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func formatTfCard(deviceId: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func unmountTfCard(deviceId: Swift.String, label: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func onvifConfig(deviceId: Swift.String, enable: Swift.String, port: Swift.String, verify: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func localAccountConfig(deviceId: Swift.String, username: Swift.String, password: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func lightingFreqConfig(deviceId: Swift.String, freqValue: Swift.Int, complete: @escaping (AJLibrary.LightingFreqModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func snapshotResourceReauth(deviceId: Swift.String, snapshotUrl: Swift.String, resourceType: Swift.String, storageMode: Swift.String, complete: @escaping (AJLibrary.SnapshotUrlReauthModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func subsetPairingMode(_ deviceId: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func actionDetectConfig(deviceId: Swift.String, params: [Swift.String : Any], complete: @escaping (AJLibrary.ActionDetectModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func indicatorLightConfig(deviceId: Swift.String, enable: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func hibernateConfig(deviceId: Swift.String, enable: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func wlanOlineSet(deviceId: Swift.String, ssid: Swift.String, password: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func wlanOnlineResult(deviceId: Swift.String, ssid: Swift.String, complete: @escaping (AJLibrary.WlanOnlineResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func pelcoConfig(deviceId: Swift.String, protocolStr: Swift.String, baudRate: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func whiteLightConfig(deviceId: Swift.String, lightMode: Swift.Int, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func sirenControl(deviceId: Swift.String, isOn: Swift.Bool, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func sirenAutoControl(deviceId: Swift.String, isOn: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func FeedTimingConfig(deviceId: Swift.String, timings: [AJLibrary.timingsModel], complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func FeedManuallyCtrl(deviceId: Swift.String, feedQuantity: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func floodlightControl(deviceId: Swift.String, toggle: Swift.String, brightness: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func rtspConfig(deviceId: Swift.String, enable: Swift.String, port: Swift.String, verify: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func pirConfig(_ deviceId: Swift.String, level: Swift.String, lingerDuration: Swift.Int, detectionRange: Swift.Int, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func motionDetectConfig(_ deviceId: Swift.String, pirDetectRange: Swift.Int, pirLingerDuration: Swift.Int, retriggerInterval: Swift.Int, susceptiveness: Swift.Int, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func detectionsConfig(_ deviceId: Swift.String, susceptiveness: Swift.Int, fullViewport: Swift.String, areas: [Swift.String]?, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func floodlightConfig(_ deviceId: Swift.String, toggle: Swift.String, brightness: Swift.String, autoPolicy: AJLibrary.AutoPolicy? = nil, timePolices: [AJLibrary.TimePolicy]? = nil, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func privateRegionConfig(_ deviceId: Swift.String, enable: Swift.String, areas: [Swift.String]?, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func autoHibernateConfig(deviceId: Swift.String, enable: Swift.String, timePolices: [AJLibrary.Policy]?, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func soundMonitorConfig(_ deviceId: Swift.String, enable: Swift.String, susceptiveness: Swift.String, policies: [AJLibrary.Policy]?, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func nightVisionConfig(_ deviceId: Swift.String, nightMode: Swift.String, colorWhenOff: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func nightVision2Config(_ deviceId: Swift.String, nightMode: Swift.String, ledMode: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func autoTrackConfig(_ deviceId: Swift.String, toggle: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func BatterySingleWakeUp(_ deviceId: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func alarmRekConfig(_ deviceId: Swift.String, humanoid: Swift.String, package: Swift.String, pet: Swift.String, vehicle: Swift.String, pnmO1: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func fastBind(_ deviceId: Swift.String, bindToken: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AddDeviceModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AddDeviceViewController : AJLibrary.BaseViewController, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) public var addDevices: [AJLibrary.AddDeviceModel]
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func initDatas()
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) public func addSuspendBtn()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CloudPlansModel : AJLibrary.ResultModel {
  public func havePolicy() -> Swift.Bool
  public func combineWithTrial() -> Swift.Bool
  @objc public func haveTrial() -> Swift.Bool
  @objc public func isShowExperienceTips() -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KeychainWrapper {
  public class func hasValueForKey(_ key: Swift.String) -> Swift.Bool
  public class func stringForKey(_ keyName: Swift.String) -> Swift.String?
  public class func objectForKey(_ keyName: Swift.String) -> (any Foundation.NSCoding)?
  @discardableResult
  public class func setString(_ value: Swift.String, forKey keyName: Swift.String) -> Swift.Bool
  public class func setObject(_ value: any Foundation.NSCoding, forKey keyName: Swift.String) -> Swift.Bool
  public class func setData(_ value: Foundation.Data, forKey keyName: Swift.String) -> Swift.Bool
  public class func removeObjectForKey(_ keyName: Swift.String) -> Swift.Bool
  @objc deinit
}
@objc public enum CameraStatus : ObjectiveC.NSInteger {
  case offline = 1
  case online = 2
  case upgrading = 4
  case hibernate = 8
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class BaseSetting : AJLibrary.ResultModel {
  @objc public var whiteBalance: Swift.String?
  @objc public var freqValue: Swift.String?
  @objc public var nightMode: Swift.String?
  @objc public var lightMode: Swift.String
  @objc public var orientationValue: Swift.String?
  @objc public var aliasName: Swift.String?
  @objc public var deviceId: Swift.String?
  @objc public var deviceMode: Swift.String?
  @objc public var fwVersion: Swift.String?
  @objc public var newFwVersion: Swift.String?
  @objc public var onlineModified: Swift.String?
  @objc public var onlineStatus: Swift.Int
  @objc public var remoteAddr: Swift.String?
  @objc public var tunnelSyncTime: Swift.String?
  @objc public var vendorCode: Swift.String?
  @objc public var snapshotTs: Swift.String?
  @objc public var snapshotUrl: Swift.String?
  @objc public var accessKey: Swift.String?
  @objc public var batteryCapacity: Swift.Int
  @objc public var wifiSignal: Swift.Int
  @objc public var batteryCapacityTs: Swift.String?
  @objc public var channelId: Swift.String?
  @objc public var chargeStatusTs: Swift.String?
  @objc public var wifiSignalTs: Swift.String?
  @objc public var lastPingTime: Swift.String?
  @objc public var masterUid: Swift.String?
  @objc public var continent: Swift.String?
  @objc public var country: Swift.String?
  @objc public var deviceType: Swift.Int
  @objc public var bizRestricted: Swift.String?
  @objc public var aclid: Swift.String?
  @objc public var prodName: Swift.String?
  @objc public var status: AJLibrary.CameraStatus {
    @objc get
  }
  public func setAlarmNeedRestartDevice() -> Swift.Bool
  @objc public func isCharging() -> Swift.Bool
  @objc public func isUnauthorizedSim() -> Swift.Bool
  @objc public func fwHaveNewVersion() -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class QualityModel : ObjectiveC.NSObject {
  @objc public var quality: Swift.String
  @objc public var number: Swift.String
  public func channelString() -> Swift.String
  public func chNum() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Stream : AJLibrary.ResultModel {
  @objc public var bitRate: Swift.String?
  @objc public var frameRate: Swift.String?
  @objc public var localUrl: Swift.String?
  @objc public var no: Swift.String?
  @objc public var quality: Swift.String
  @objc public var resHeight: Swift.String?
  @objc public var resWidth: Swift.String?
  @objc public var wanUrl: Swift.String?
  public func channelString() -> Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StreamConfig : AJLibrary.ResultModel {
  @objc public var streams: [AJLibrary.Stream]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LivePolicy : AJLibrary.ResultModel {
  @objc public var p2p: Swift.String?
  @objc public var relay: Swift.String?
  @objc public var rtmp: Swift.String?
  @objc public var upnp: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NetworkConfig : AJLibrary.ResultModel {
  @objc public var ethMac: Swift.String?
  @objc public var localDirectProbeUrl: Swift.String?
  @objc public var localIp: Swift.String?
  @objc public var localIpMask: Swift.String?
  @objc public var wanIp: Swift.String?
  @objc public var wlanMac: Swift.String?
  @objc public var ssid: Swift.String?
  @objc public var netLinkType: Swift.String?
  @objc public var wifiSignal: Swift.Int
  @objc public var wifiRssi: Swift.Int
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ViewAngle : AJLibrary.ResultModel {
  @objc public var viewAngle: Swift.String?
  @objc public var url: Swift.String?
  @objc public var name: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ViewAnglesConfig : AJLibrary.ResultModel {
  @objc public var viewAngles: [AJLibrary.ViewAngle]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Policy : AJLibrary.ResultModel, Foundation.NSCopying {
  @objc public var no: Swift.String?
  @objc public var enable: Swift.Bool
  @objc public var format: Swift.String?
  @objc public var quality: Swift.String?
  @objc public var startTime: Swift.String?
  @objc public var endTime: Swift.String?
  @objc public var weekDays: [Swift.String]?
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func formatStartTime() -> Swift.String?
  public func formatEndTime() -> Swift.String?
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LocalStorConfig : AJLibrary.ResultModel {
  @objc public var enable: Swift.Bool
  @objc public var storageType: Swift.String?
  @objc public var writeMode: Swift.String?
  @objc public var triggerMode: Swift.String?
  @objc public var nasPath: Swift.String?
  @objc public var playUrlRoot: Swift.String?
  @objc public var policies: [AJLibrary.Policy]?
  @objc public var quality: Swift.String?
  @objc public var ecoRecordDurationLimit: Swift.Int
  @objc public var remoteTFUrl: Swift.String?
  public func cardWriteMode(writeMode: Swift.String?) -> Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MotionDetectConfig : AJLibrary.ResultModel, Foundation.NSCopying {
  @objc public var pirDetectRange: Swift.Int
  @objc public var pirLingerDuration: Swift.Int
  @objc public var retriggerInterval: Swift.Int
  @objc public var susceptiveness: Swift.Int
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public func defaultPirConfig() -> AJLibrary.MotionDetectConfig
  public func detectionRangeComment(_ pirDetectionRanges: Swift.String) -> Swift.String
  public func levelComment() -> Swift.String
  public func lengthComment() -> Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MonitorConfig : AJLibrary.ResultModel {
  @objc public var enable: Swift.Bool
  @objc public var susceptiveness: Swift.Int
  @objc public var genAlarmThumb: Swift.Bool
  @objc public var policies: [AJLibrary.Policy]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CloudStorConfig : AJLibrary.ResultModel {
  @objc public var enable: Swift.Bool
  @objc public var quality: Swift.String?
  @objc public var ecoRecordDurationLimit: Swift.Int
  @objc public var policies: [AJLibrary.Policy]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AudioConfig : AJLibrary.ResultModel {
  @objc public var micEnable: Swift.String?
  @objc public var speakerVolume: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PictureConfig : AJLibrary.ResultModel {
  @objc public var brightness: Swift.String?
  @objc public var contrast: Swift.String?
  @objc public var saturation: Swift.String?
  @objc public var sharpness: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TimeConfig : AJLibrary.ResultModel {
  @objc public var tzName: Swift.String?
  @objc public var tzValue: Swift.String?
  @objc public var dst: Swift.String?
  @objc public var tzGmt: Swift.String?
  @objc public var tzUtc: Swift.String?
  @objc public var tzString: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CloudStorPlan : AJLibrary.ResultModel {
  @objc public var sku: Swift.String?
  @objc public var level: Swift.String?
  @objc public var validTsStart: Swift.String?
  @objc public var validTsEnd: Swift.String?
  @objc public var keepDays: Swift.String?
  @objc public var alarmVideo: Swift.Bool
  @objc public var fullDay: Swift.Bool
  @objc public var lastStoreTs: Swift.String?
  @objc public var expireViewAt: Swift.String?
  @objc public var uid: Swift.String?
  @objc public var orderId: Swift.String?
  public func serviceIsVaild() -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TfCardConfig : AJLibrary.ResultModel {
  @objc public var status: Swift.String?
  @objc public var label: Swift.String?
  @objc public var serialNo: Swift.String?
  @objc public var manufacturerId: Swift.String?
  @objc public var manufactureDate: Swift.String?
  @objc public var oemId: Swift.String?
  @objc public var hwReversion: Swift.String?
  @objc public var fwReversion: Swift.String?
  @objc public var capacityBytes: Swift.String?
  @objc public var freespaceBytes: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IndicatorLightConfig : AJLibrary.ResultModel {
  @objc public var enable: Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class OnvifConfig : AJLibrary.ResultModel {
  @objc public var enable: Swift.Bool
  @objc public var port: Swift.String?
  @objc public var verify: Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NewFwversionModel : AJLibrary.ResultModel {
  @objc public var version: Swift.String?
  @objc public var priority: Swift.String?
  @objc public var downloadUrl: Swift.String?
  @objc public var releaseNoteUrl: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LocalAccountConfig : AJLibrary.ResultModel {
  @objc public var username: Swift.String?
  @objc public var password: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ProtectionPlan : AJLibrary.ResultModel {
  @objc public var alarmVideo: Swift.Bool
  @objc public var buyerId: Swift.String?
  @objc public var cloudStorFullDay: Swift.String?
  @objc public var expireViewAt: Swift.String?
  @objc public var fullDay: Swift.Bool
  @objc public var genAlarmThumb: Swift.Bool
  @objc public var keepDays: Swift.String?
  @objc public var lastStoreTs: Swift.String?
  @objc public var level: Swift.String?
  @objc public var limitDevices: Swift.String?
  @objc public var localStorFullDay: Swift.Bool
  @objc public var orderId: Swift.String?
  @objc public var sku: Swift.String?
  @objc public var validTsEnd: Swift.String?
  @objc public var validTsStart: Swift.String?
  @objc public var alarmRek: Swift.Bool
  public func serviceIsVaild() -> Swift.Bool
  public func isAiPlan() -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PrivateRegionConfig : AJLibrary.ResultModel {
  @objc public var coverMode: Swift.String?
  @objc public var enable: Swift.Bool
  @objc public var name: Swift.String?
  @objc public var areas: [Swift.String]
  public func selectAreas() -> [Swift.String]
  public func coordinateArea() -> (Swift.Int?, Swift.Int?, Swift.Int?, Swift.Int?)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NightVisionConfig : AJLibrary.ResultModel {
  @objc public var nightMode: Swift.String?
  @objc public var colorWhenOff: Swift.String?
  @objc public var ledMode: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TrackConfig : AJLibrary.ResultModel {
  @objc public var toggle: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlarmRekConfig : AJLibrary.ResultModel, Foundation.NSCopying {
  @objc public var pnmHumanoid: Swift.Bool
  @objc public var pnmO1: Swift.Bool
  @objc public var pnmPackage: Swift.Bool
  @objc public var pnmPet: Swift.Bool
  @objc public var pnmVehicle: Swift.Bool
  @objc public var rekHumanoid: Swift.Bool
  @objc public var rekPackage: Swift.Bool
  @objc public var rekPet: Swift.Bool
  @objc public var rekVehicle: Swift.Bool
  @objc public var __persistent: Swift.Bool
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CameraModel : AJLibrary.ResultModel {
  @objc public var autoHibernateConfig: AJLibrary.AutoHibernateConfig?
  @objc public var base: AJLibrary.BaseSetting?
  @objc public var capability: AJLibrary.WCapability?
  @objc public var streamConfig: AJLibrary.StreamConfig?
  @objc public var livePolicy: AJLibrary.LivePolicy?
  @objc public var localAccountConfig: AJLibrary.LocalAccountConfig?
  @objc public var networkConfig: AJLibrary.NetworkConfig?
  @objc public var viewAnglesConfig: AJLibrary.ViewAnglesConfig?
  @objc public var localStorConfig: AJLibrary.LocalStorConfig?
  @objc public var moveMonitorConfig: AJLibrary.MonitorConfig?
  @objc public var motionDetectConfig: AJLibrary.MotionDetectConfig?
  @objc public var soundMonitorConfig: AJLibrary.MonitorConfig?
  @objc public var cloudStorConfig: AJLibrary.CloudStorConfig?
  @objc public var cloudStorPlan: AJLibrary.CloudStorPlan?
  @objc public var audioConfig: AJLibrary.AudioConfig?
  @objc public var pictureConfig: AJLibrary.PictureConfig?
  @objc public var timeConfig: AJLibrary.TimeConfig?
  @objc public var tfcardConfig: AJLibrary.TfCardConfig?
  @objc public var indicatorLightConfig: AJLibrary.IndicatorLightConfig?
  @objc public var onvifConfig: AJLibrary.OnvifConfig?
  @objc public var newFwversion: AJLibrary.NewFwversionModel?
  @objc public var actionDetectConfig: AJLibrary.ActionDetectConfig?
  @objc public var lightingFreqConfig: AJLibrary.LightingFreqConfig?
  @objc public var hibernateConfig: AJLibrary.HibernateConfig?
  @objc public var pelcoConfig: AJLibrary.PelcoConfig?
  @objc public var detectionsConfig: AJLibrary.DetectionsConfig?
  @objc public var rtspConfig: AJLibrary.RtspConfig?
  @objc public var batteryConfig: AJLibrary.BatteryConfig?
  @objc public var pirConfig: AJLibrary.PirConfig?
  @objc public var floodlightConfig: AJLibrary.FloodlightConfig?
  @objc public var sirenConfig: AJLibrary.SirenConfig?
  @objc public var protectionPlan: AJLibrary.ProtectionPlan?
  @objc public var feedTimingConfig: AJLibrary.feedTimingConfig?
  @objc public var feedConfig: AJLibrary.feedConfig?
  @objc public var privateRegionConfig: AJLibrary.PrivateRegionConfig?
  @objc public var nightVisionConfig: AJLibrary.NightVisionConfig?
  @objc public var nightVision2Config: AJLibrary.NightVisionConfig?
  @objc public var trackConfig: AJLibrary.TrackConfig?
  @objc public var alarmRekConfig: AJLibrary.AlarmRekConfig?
  @objc public func isCloudEnable() -> Swift.Bool
  public func batteryCapacity() -> Swift.Int?
  public func homeBatteryChargingAnimationName() -> Swift.String
  public func settingBatteryChargingAnimationName() -> Swift.String
  public func settingWifiSignalImage() -> UIKit.UIImage?
  public func settingHeaderNetworkImage() -> UIKit.UIImage?
  public func settingHeaderNetworkString() -> Swift.String?
  @objc public func floatingSignalImage_4G() -> UIKit.UIImage?
  public func homeNetworkImage() -> UIKit.UIImage?
  @objc public func playerNetworkImage() -> UIKit.UIImage?
  @objc public func homeWifiSignalImage() -> UIKit.UIImage?
  public func wifiSignalStrengthString() -> Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AutoHibernateConfig : AJLibrary.ResultModel {
  @objc public var enable: Swift.Bool
  @objc public var timePolicies: [AJLibrary.Policy]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SirenConfig : AJLibrary.ResultModel {
  @objc public var toggle: Swift.String
  @objc public var autoPolicy: AJLibrary.AutoPolicy?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class feedTimingConfig : AJLibrary.ResultModel {
  @objc public var timings: [AJLibrary.timingsModel]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class feedConfig : AJLibrary.ResultModel {
  @objc public var feedRemain: Swift.String?
  @objc public var lastUpdate: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class timingsModel : AJLibrary.ResultModel {
  @objc public var no: Swift.String?
  @objc public var enable: Swift.String?
  @objc public var type: Swift.String?
  @objc public var startTime: Swift.String?
  @objc public var repeatWeeks: Swift.String?
  @objc public var onceTimestamp: Swift.String?
  @objc public var feedQuantity: Swift.String?
  @objc public var feedUnit: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class feedLogsModel : AJLibrary.ResultModel {
  @objc public var feedLogs: [AJLibrary.feedLogModel]?
  @objc public var ctime: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class feedLogModel : AJLibrary.ResultModel {
  @objc public var did: Swift.String?
  @objc public var cdate: Swift.String?
  @objc public var ctime: Swift.String?
  @objc public var cts: Swift.String?
  @objc public var pts: Swift.String?
  @objc public var ats: Swift.String?
  @objc public var feedQuantity: Swift.String?
  @objc public var trigger: Swift.String?
  @objc public var feedUnit: Swift.String?
  @objc public var performTs: Swift.String?
  @objc public var performTz: Swift.String?
  @objc public var performResult: Swift.String?
  @objc public var expireViewAt: Swift.String?
  @objc public var expireDelAt: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
public enum AutoLightMode : Swift.String {
  case AutoLightModeActionDetect
  case AutoLightModeNightMode
  case AutoLightModeTiming
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class FloodlightConfig : AJLibrary.ResultModel, Foundation.NSCopying {
  @objc public var toggle: Swift.String
  @objc public var brightness: Swift.String
  @objc public func timePolice1() -> AJLibrary.TimePolicy?
  @objc public func timePolice2() -> AJLibrary.TimePolicy?
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AutoPolicy : AJLibrary.ResultModel, Foundation.NSCopying {
  @objc public var enable: Swift.String
  @objc public var lightingDur: Swift.String
  @objc public var triggersOn: [Swift.String]
  public func autoLightMode() -> AJLibrary.AutoLightMode
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TimePolicy : AJLibrary.ResultModel, Foundation.NSCopying {
  @objc public var no: Swift.String
  @objc public var enable: Swift.String
  @objc public var startTime: Swift.String
  @objc public var endTime: Swift.String
  @objc public var toggle: Swift.String
  @objc public var weekDays: [Swift.String]
  public class func createDefault(no: Swift.String) -> AJLibrary.TimePolicy
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public func formatStartTime() -> Swift.String?
  public func formatEndTime() -> Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PirConfig : AJLibrary.ResultModel, Foundation.NSCopying {
  @objc public var lingerDuration: Swift.Int
  @objc public var detectionRange: Swift.Int
  @objc public var level: Swift.String?
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public func defaultPirConfig() -> AJLibrary.PirConfig
  public func detectionRangeComment(_ pirDetectionRanges: Swift.String) -> Swift.String
  public func levelComment() -> Swift.String
  public func lengthComment() -> Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BatteryConfig : AJLibrary.ResultModel {
  @objc public var capacity: Swift.Int
  @objc public var charge: Swift.Int
  @objc public var quantity: Swift.Int
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RtspConfig : AJLibrary.ResultModel {
  @objc public var enable: Swift.String?
  @objc public var port: Swift.Int
  @objc public var verify: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DetectionsConfig : AJLibrary.ResultModel {
  @objc public var share: AJLibrary.DetectionShare?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DetectionShare : AJLibrary.ResultModel {
  @objc public var name: Swift.String?
  @objc public var susceptiveness: Swift.Int
  @objc public var fullViewport: Swift.Bool
  @objc public var areas: [Swift.String]?
  public func coordinateArea() -> (Swift.Int?, Swift.Int?, Swift.Int?, Swift.Int?)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LightingFreqConfig : AJLibrary.ResultModel {
  @objc public var freqValue: Swift.Int
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PelcoConfig : AJLibrary.ResultModel {
  @objc public var baudRate: Swift.String?
  @objc public var `protocol`: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ActionDetectConfig : AJLibrary.ResultModel {
  @objc public var clipEndMode: Swift.Int
  @objc public var clipLength: Swift.Int
  @objc public var enable: Swift.Bool
  @objc public var expireAt: Swift.String?
  @objc public var retriggerTime: Swift.Int
  @objc public var susceptiveness: Swift.Float
  @objc public var backupToLocalStor: Swift.Bool
  @objc public var respondMode: Swift.Int
  @objc public var policies: [AJLibrary.Policy]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HibernateConfig : AJLibrary.ResultModel {
  @objc public var enable: Swift.String?
  @objc public func isOn() -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LiveSecToken : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CloudStorageModel : AJLibrary.ResultModel {
  @objc public var intraPicture: Swift.String?
  @objc public var m3u8Url: Swift.String?
  @objc public var fps: Swift.String?
  @objc public var encryptMode: Swift.String?
  @objc public var sessionKey: Swift.String?
  @objc public var tsStart: Swift.String?
  @objc public var tsEnd: Swift.String?
  @objc public var expireViewAt: Swift.String?
  @objc public var groupId: Swift.String?
  @objc public var recordType: Swift.String?
  @objc public var cognitives: [AJLibrary.CloudStorageCognitiveModel]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CloudStorageCognitiveModel : AJLibrary.ResultModel {
  @objc public var confidence: Swift.String?
  @objc public var type: Swift.String?
  @objc public var value: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CloudStorageDeleModel : AJLibrary.ResultModel {
  @objc public var groupId: Swift.String?
  @objc public var tsStart: Foundation.NSNumber?
  @objc public var tsEnd: Foundation.NSNumber?
  @objc public var delIndex: Foundation.NSNumber?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CloudStorageDeleRealDayModel : AJLibrary.ResultModel {
  @objc public var dayStartTs: Foundation.NSNumber?
  @objc public var dayEndTs: Foundation.NSNumber?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BatteryCamDeleModel : AJLibrary.ResultModel {
  @objc public var tsStart: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CameraGlobals {
  public static let shared: AJLibrary.CameraGlobals
  public var stringsTable: Swift.String
  public var photoLibraryThumbnailSize: CoreFoundation.CGSize
  public var defaultCameraPosition: AVFoundation.AVCaptureDevice.Position
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AJDeviceUtils : ObjectiveC.NSObject {
  @objc public static let shared: AJLibrary.AJDeviceUtils
  @objc public func getDeviceInfo(deviceId: Swift.String) -> AJLibrary.CameraModel?
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.String {
  public func substring(from startStr: Swift.String, to endStr: Swift.String) -> Swift.String?
  public func substring(from string: Swift.String, offset: Swift.Int) -> Swift.String?
  public func subString(to string: Swift.String) -> Swift.String?
  public func subString(from string: Swift.String) -> Swift.String?
  public static func ignoreCaseEqual(_ str1: Swift.String?, _ str2: Swift.String?) -> Swift.Bool
  public func trimString(_ trmStr: Swift.String) -> Swift.String
  public func trimWhiteSpace() -> Swift.String
  public func trimSpaceAndNewline() -> Swift.String
  public func trimAllString(_ trmStr: Swift.String) -> Swift.String
  public func isEmptyStr() -> Swift.Bool
  public func safeUrlBase64Encode() -> Swift.String
  public func toBool() -> Swift.Bool
  public func toInt() -> Swift.Int?
  public func toFloat() -> Swift.Float?
  public func toDouble() -> Swift.Double?
  public func milliStampToDate(formatter: Swift.String) -> Swift.String?
  public func toDate(formatter: Swift.String) -> Swift.String?
  public func jsonToDic() -> [Swift.String : Any]?
  public func toTimeStamp(formatter: Swift.String) -> Swift.String?
  public func urlEncoded() -> Swift.String
  public func urlDecoded() -> Swift.String
  public func heightWithFont(fontSize: CoreFoundation.CGFloat = 16, fixedWidth: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  public func regexMatch(_ pattern: Swift.String) -> Swift.Bool
  public func isPureInt() -> Swift.Bool
  public func isValidPassword() -> Swift.Bool
  public func isValidPhoneNum() -> Swift.Bool
  public func isValidEmail() -> Swift.Bool
  public func isValidAppleAndGoogleAccount() -> Swift.Bool
  public func isSpecialValidPassword() -> Swift.Bool
  public func isInternationalValidPhoneNum(_ regionCode: Swift.String) -> Swift.Bool?
  public func heightWithStringAttributes(attributes: [Foundation.NSAttributedString.Key : Any], fixedWidth: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  public func heightWithFont(font: UIKit.UIFont = UIFont.systemFont(ofSize: 18), fixedWidth: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  public func widthWithStringAttributes(attributes: [Foundation.NSAttributedString.Key : Any]) -> CoreFoundation.CGFloat
  public func widthWithFont(font: UIKit.UIFont = UIFont.systemFont(ofSize: 18)) -> CoreFoundation.CGFloat
  public func compare(with version: Swift.String) -> Foundation.ComparisonResult
  public func isNewer(than aVersionString: Swift.String) -> Swift.Bool
  public func isOlder(than aVersionString: Swift.String) -> Swift.Bool
  public func isSame(to aVersionString: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class CameraInfoModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CamerasModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
public typealias RequestRetryCompletion = (_ shouldRetry: Swift.Bool, _ timeDelay: Foundation.TimeInterval) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class IPCPurchaseCloudStorViewController : AJLibrary.BaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension AJLibrary.IPCPurchaseCloudStorViewController : AJLibrary.TwicketSegmentedControlDelegate {
  @_Concurrency.MainActor(unsafe) public func didSelect(_ segmentIndex: Swift.Int)
}
extension AJLibrary.IPCPurchaseCloudStorViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DiagnoseViewController : AJLibrary.BaseViewController {
  @_Concurrency.MainActor(unsafe) public var deviceId: Swift.String
  @_Concurrency.MainActor(unsafe) public var isNeedDiagnoseWSS: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum ShakeDirection : Swift.Int {
  case horizontal
  case vertical
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func corner(byRoundingCorners corners: UIKit.UIRectCorner, radii: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func shake(direction: AJLibrary.ShakeDirection = .horizontal, times: Swift.Int = 5, interval: Foundation.TimeInterval = 0.1, delta: CoreFoundation.CGFloat = 2, completion: (() -> Swift.Void)? = nil)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(M3U8InfoModel) public class M3U8InfoModel : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class WVTableCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public let leftGap: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) final public let rightGap: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open var leftIconGap: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open var rightAccessoryGap: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open var item: AJLibrary.WVTableItem {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let iconView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let commentLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let userSwitch: UIKit.UISwitch
  @_Concurrency.MainActor(unsafe) public var indicator: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) public var customImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) open class func cellID() -> Swift.String
  @_Concurrency.MainActor(unsafe) open class func cellHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func loadUIs()
  @_Concurrency.MainActor(unsafe) public func setIconImageView()
  @_Concurrency.MainActor(unsafe) public func setTitleLabel()
  @_Concurrency.MainActor(unsafe) public func setupIndicator()
  @_Concurrency.MainActor(unsafe) open func setupSwitch()
  @_Concurrency.MainActor(unsafe) public func setAccessoryView()
  @_Concurrency.MainActor(unsafe) public func setAccessoryCustomImageView()
  @_Concurrency.MainActor(unsafe) public func setCommentLabel()
  @objc @_Concurrency.MainActor(unsafe) open func valueChanged()
  @_Concurrency.MainActor(unsafe) open func setComment()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class GeneralSetViewController : AJLibrary.UIBaseTableViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) override public func initData()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ApnsManager : ObjectiveC.NSObject {
  @objc public static let shared: AJLibrary.ApnsManager
  public var notiTimeStamp: Swift.String?
  @objc public func handleApnsNotiReponse(_ notiResponse: UserNotifications.UNNotificationResponse)
  public func showApnsDetail(_ apnsModel: AJLibrary.ApnsModel)
  public func handleInactiveNotificationInfo(_ userInfo: [Swift.AnyHashable : Any])
  public func showNotificationAlert(apnsModel: AJLibrary.ApnsModel)
  public func showLogoutAlert(_ title: Swift.String?, message: Swift.String?)
  public func kickout()
  @objc public func dismissPrevious(completion: (() -> ())? = nil)
  @objc public func initPush(_ callback: ((Swift.String) -> ())? = nil)
  @objc public func setFirebaseToken(_ deviceToken: Swift.String)
  public func registAPNS()
  public func reloadPushSetting()
  public func aliSendNotificationAck(_ data: [Swift.AnyHashable : Any]?)
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.Array {
  public func element(at index: Swift.Int) -> Element?
}
public let DiagnoseTableRowHeight: CoreFoundation.CGFloat
@objc @_inheritsConvenienceInitializers public class AJLibManager : AJLibrary.BaseNetManager {
  @objc public static let shared: AJLibrary.AJLibManager
  @objc public static func sdkInit(_ appKey: Swift.String, appSecret: Swift.String, success: @escaping (() -> ()), failure: @escaping ((AJLibrary.ErrorModel?) -> ()))
  @objc public static func fastSignIn(_ allyName: Swift.String, allyToken: Swift.String, account: Swift.String, success: @escaping (() -> ()), failure: @escaping ((AJLibrary.ErrorModel?) -> ()))
  @objc public static func logout()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ShareCameraSettingViewController : AJLibrary.UIBaseTableViewController {
  @objc @_Concurrency.MainActor(unsafe) public var deviceId: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) override public func initData()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AJBinderResponse : ObjectiveC.NSObject {
  @objc public static let shared: AJLibrary.AJBinderResponse
  @objc public var ajBinderSuccessBlock: ((AJLibrary.AJDeviceInfoModel?) -> ())?
  @objc public var ajBinderFailBlock: ((AJLibrary.AJError?) -> ())?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AJBaseNavigationController : UIKit.UINavigationController, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func pushViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public func setStatusBarHidden(_ hidden: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class WiFiListModel : AJLibrary.ResultModel {
  @objc public var ssid: Swift.String?
  @objc public var open: Swift.Bool
  @objc public var signal: Swift.Int
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SystemMsgStatusModel : AJLibrary.ResultModel {
  public func haveNewMessage() -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AJSettingsManager : ObjectiveC.NSObject {
  @objc public static let shared: AJLibrary.AJSettingsManager
  @objc public func changeAliasName(_ deviceId: Swift.String, aliasName: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func setAliasName(_ deviceId: Swift.String, aliasName: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func firmwareUpgrade(_ deviceId: Swift.String, version: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func removeDevice(_ deviceId: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func orientationSetting(_ deviceId: Swift.String, orientationValue: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func lightingFreqConfig(_ deviceId: Swift.String, freqValue: Swift.Int, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func microphoneSetting(_ deviceId: Swift.String, micEnable: Swift.String, speakerVolume: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func indicatorLightConfig(_ deviceId: Swift.String, enable: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func unmountTfCard(_ deviceId: Swift.String, label: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func autoTrackConfig(_ deviceId: Swift.String, toggle: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func autoHibernateConfig(_ deviceId: Swift.String, enable: Swift.String, wholeDayEnable: Swift.String, wholeStartTime: Swift.String, wholeEndTime: Swift.String, wholeWeekDays: [Swift.String], enable1: Swift.String, startTime1: Swift.String, endTime1: Swift.String, weekDays1: [Swift.String], enable2: Swift.String, startTime2: Swift.String, endTime2: Swift.String, weekDays2: [Swift.String], complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func soundMonitorConfig(_ deviceId: Swift.String, enable: Swift.String, susceptiveness: Swift.String, wholeDayEnable: Swift.String, wholeStartTime: Swift.String, wholeEndTime: Swift.String, wholeWeekDays: [Swift.String], enable1: Swift.String, startTime1: Swift.String, endTime1: Swift.String, weekDays1: [Swift.String], enable2: Swift.String, startTime2: Swift.String, endTime2: Swift.String, weekDays2: [Swift.String], complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func privateRegionConfig(_ deviceId: Swift.String, enable: Swift.String, areas: [Swift.String]?, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func floodlightControl(_ deviceId: Swift.String, toggle: Swift.String, brightness: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func nightVisionConfig(_ deviceId: Swift.String, nightMode: Swift.String, colorWhenOff: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func nightVision2Config(_ deviceId: Swift.String, nightMode: Swift.String, ledMode: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func localAccountConfig(deviceId: Swift.String, username: Swift.String, password: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func rtspConfig(deviceId: Swift.String, port: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func onvifConfig(deviceId: Swift.String, enable: Swift.String, port: Swift.String, verify: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func setTimezone(deviceId: Swift.String, tzName: Swift.String, tzValue: Swift.String, autoAdjust: Swift.String, tzDistrict: Swift.String?, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func fetchTimezone(_ complete: (([[Any]]?, AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func detectionsConfig(_ deviceId: Swift.String, susceptiveness: Swift.Int, fullViewport: Swift.String, areas: [Swift.String]?, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func moveMonitorConfig(_ deviceId: Swift.String, enable: Swift.String, genAlarmThumb: Swift.String, wholeDayEnable: Swift.String, wholeStartTime: Swift.String, wholeEndTime: Swift.String, wholeWeekDays: [Swift.String], enable1: Swift.String, startTime1: Swift.String, endTime1: Swift.String, weekDays1: [Swift.String], enable2: Swift.String, startTime2: Swift.String, endTime2: Swift.String, weekDays2: [Swift.String], complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func alarmRekConfig(_ deviceId: Swift.String, humanoid: Swift.String, package: Swift.String, pet: Swift.String, vehicle: Swift.String, pnmO1: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func floodlightConfig(_ deviceId: Swift.String, toggle: Swift.String, brightness: Swift.String, autoPolicy: AJLibrary.AutoPolicy? = nil, timePolices: [AJLibrary.TimePolicy]? = nil, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func localStorageSetting(_ deviceId: Swift.String, enable: Swift.String, nasPath: Swift.String, playUrlRoot: Swift.String, quality: Swift.String, storageType: Swift.String, triggerMode: Swift.String, writeMode: Swift.String, wholeDayEnable: Swift.String, wholeStartTime: Swift.String, wholeEndTime: Swift.String, wholeWeekDays: [Swift.String], wholeFormat: Swift.String, enable1: Swift.String, startTime1: Swift.String, endTime1: Swift.String, weekDays1: [Swift.String], format1: Swift.String, enable2: Swift.String, startTime2: Swift.String, endTime2: Swift.String, weekDays2: [Swift.String], format2: Swift.String, ecoRecordDurationLimit: Swift.Int, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func cloudStorageSetting(_ deviceId: Swift.String, enable: Swift.String, wholeDayEnable: Swift.String, wholeStartTime: Swift.String, wholeEndTime: Swift.String, wholeWeekDays: [Swift.String], enable1: Swift.String, startTime1: Swift.String, endTime1: Swift.String, weekDays1: [Swift.String], enable2: Swift.String, startTime2: Swift.String, endTime2: Swift.String, weekDays2: [Swift.String], expireAt: Swift.String, ecoRecordDurationLimit: Swift.Int, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func formatTfCard(_ deviceId: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func hibernateConfig(_ deviceId: Swift.String, enable: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func setSnapshot(_ deviceId: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func restart(_ deviceId: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func retoreFactory(_ deviceId: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func enableShareEntry(_ deviceId: Swift.String, receiverUid: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func disableShareEntry(_ deviceId: Swift.String, receiverUid: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func delNewShare(_ deviceId: Swift.String, receiverUid: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func getShareSendInfo(_ deviceId: Swift.String, complete: (([AJLibrary.ShareSendReceiverModel]?, AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func createNewShare(_ deviceId: Swift.String, receiverName: Swift.String, receiverType: Swift.String, prodName: Swift.String, complete: ((AJLibrary.ShareSendReceiverModel?, AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func delReceiveNewShare(_ deviceId: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func rejectReceiveNewShare(_ deviceId: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func reviceSharedCamera(_ deviceId: Swift.String, senderUid: Swift.String, complete: ((AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc public func getShareReceiveInfo(_ complete: (([AJLibrary.ShareSendReceiverModel]?, AJLibrary.ErrorModel?) -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
public enum ImageType : Swift.String {
  case gif
  case png
  case jpeg
  case webp
  case defaultType
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum InviteStatus : Swift.String {
  case WaitingReceive
  case InviteSuccess
  case InviteExpired
  case InviteDeleted
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum DeviceModeType : Swift.Int, HandyJSON.HandyJSONEnum {
  case Camera = 1
  case Lock = 2
  case BatteryCamera = 3
  case BatterySingle = 4
  case DoorbellSingle = 5
  case Doorbell = 6
  case Gateway = 8
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ConAcountType : Swift.String {
  case Bound
  case Shared
  case ChildDevice
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ShareDeviceStatus : Swift.String {
  case Invalid
  case Valid
  case Disable
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(ConDeviceModel) public class ConDeviceModel : AJLibrary.ResultModel, Foundation.NSSecureCoding {
  public var deviceId: Swift.String?
  @objc public var aliasName: Swift.String?
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func curDeviceType() -> AJLibrary.DeviceModeType
  public func curConAcountType() -> AJLibrary.ConAcountType
  @objc public func isShareVaild() -> Swift.Bool
  public func shareDeviceConStatus() -> AJLibrary.ShareDeviceStatus
  @objc public func isShareDevice() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GroupsModel : AJLibrary.ResultModel {
  @objc public var groupid: Swift.String?
  @objc public var name: Swift.String?
  @objc public var dids: [AJLibrary.GroupDidModel]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GroupDidModel : AJLibrary.ResultModel {
  @objc public var slot: Swift.String?
  @objc public var did: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DevGeneralModel) public class DevGeneralModel : AJLibrary.ResultModel, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  public func curDeviceType() -> AJLibrary.DeviceModeType
  public func sdcName() -> Swift.String?
  public func sdcUrl() -> Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UserInviteModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ShareUserInviteModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CamerasSummaryModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CameraSummaryModel : AJLibrary.ResultModel {
  @objc public var devGatewayUrl: Swift.String?
  @objc public var deviceId: Swift.String?
  @objc public var gatewayUrl: Swift.String?
  @objc public var tunnelUrl: Swift.String?
  @objc public var cloudStorUrl: Swift.String?
  @objc public var devCloudStorUrl: Swift.String?
  @objc public var devEmcUrl: Swift.String?
  @objc public var emcUrl: Swift.String?
  @objc public var stunServers: Swift.String?
  @objc public var appKeepAliveUrl: Swift.String?
  @objc public var subDevConfigs: [Swift.String : Swift.String]?
  @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DevicesModel) public class DevicesModel : AJLibrary.ResultModel, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class M3U8Handler : ObjectiveC.NSObject {
  @objc public func parseUrl(_ deviceId: Swift.String, urlsStr: [Swift.String], programDate: Swift.String? = nil, complete: @escaping ([AJLibrary.M3U8InfoModel]?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CloudExplainViewController : AJLibrary.BaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) public init(isBattery: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CloudSettingViewController : AJLibrary.BaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var deviceId: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var order: AJLibrary.OrderModel?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override public func PopPrevious() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.Data {
  public var stringValue: Swift.String? {
    get
  }
  public func hexadecimal() -> Swift.String
}
public enum FileFolder : Swift.String {
  case SnapFolder
  case TempSnapFolder
  case VideoFolder
  case JointTsFolder
  case CloudTsFolder
  case CloudVideoFolder
  case SessionCacheFolder
  case TempDecodeVideo
  case HomeSnapshots
  case LocalLogFolder
  case HomeDevicesListFolder
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LocalFileManager : ObjectiveC.NSObject {
  @objc public static var shared: AJLibrary.LocalFileManager
  public var logFileName: Swift.String
  @objc public func createLocalPath()
  public func moveLocalItems()
  public func writeToFile(_ filePath: Swift.String, data: Foundation.Data?)
  public func loadData(from filePath: Swift.String) -> Foundation.Data?
  @discardableResult
  public func rename(_ srcPath: Swift.String?, toPath: Swift.String?) -> Swift.Bool
  @objc public func removeFile(_ path: Swift.String)
  public func jointTsPath(_ userFolder: Swift.String, fileName: Swift.String) -> Swift.String
  public func cloudTsPath(_ userFolder: Swift.String, fileName: Swift.String) -> Swift.String
  public func localLogFolderPath() -> Swift.String
  @objc public func localLogPath() -> Swift.String
  public func timezonePath() -> Swift.String
  @objc public func objcSaveSnapPath() -> Swift.String
  @objc public func tempSnapshotPath() -> Swift.String
  @objc public func homeSnapshotFilepath(_ deviceId: Swift.String) -> Swift.String
  public func deviceListPath() -> Swift.String
  public func modulePath(_ userFolder: Swift.String, moduleName: AJLibrary.FileFolder) -> Swift.String
  public func createModulePath(_ moduleName: AJLibrary.FileFolder)
  public func userFolders() -> Foundation.NSMutableSet
  public func username() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AJEthBinderManager : ObjectiveC.NSObject {
  @objc public static let shared: AJLibrary.AJEthBinderManager
  @objc public var timeout: Swift.Double
  @objc public func discoverDevices(success: (([AJLibrary.DiscoverDeviceItem]?) -> ())?, failure: ((AJLibrary.ErrorModel?) -> ())?)
  @objc public func bindDevice(_ deviceId: Swift.String, ipAddress: Swift.String, success: (() -> ())?, failure: ((AJLibrary.ErrorModel?) -> ())?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UACNetManager : AJLibrary.BaseNetManager {
  @objc public static let sharedInstance: AJLibrary.UACNetManager
  public var mAccessToken: Swift.String?
  public var mRefreshToken: Swift.String?
  public var mSecretAccessKey: Swift.String?
  public func accessToken() -> Swift.String
  public func refreshToken() -> Swift.String
  public func secretAccessKey() -> Swift.String
  public func refreshAccessToken(complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func fastSignin(allyName: Swift.String, allyToken: Swift.String, crCode: Swift.String?, ctCode: Swift.String?, complete: @escaping (AJLibrary.OauthModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func emailCheck(_ email: Swift.String, complete: @escaping (AJLibrary.EmailCheckModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func emailBindRequest(_ curUsername: Swift.String, bindEmail: Swift.String, identType: Swift.String, allyCode: Swift.String, needVerify: Swift.String, needPwd: Swift.String, password: Swift.String?, complete: @escaping (AJLibrary.OauthModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func emailBindVerify(_ email: Swift.String, verifyCode: Swift.String, complete: @escaping (AJLibrary.OauthModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func regist(_ username: Swift.String, password: Swift.String, crCode: Swift.String, ctCode: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func login(_ username: Swift.String, password: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func accountActive(_ username: Swift.String, verifyCode: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func changePassword(_ username: Swift.String, oldPsw: Swift.String, newPsw: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func resetPassword(_ username: Swift.String, password: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func logout(complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func fastLogout(_ username: Swift.String, allyName: Swift.String, allyToken: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func verifyCode(_ username: Swift.String, action: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func smsSignup(_ username: Swift.String, password: Swift.String, verifyCode: Swift.String, crCode: Swift.String, ctCode: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func smsResetPassword(_ username: Swift.String, password: Swift.String, verifyCode: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func signupCheck(_ username: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func getCameraBindToken(deviceId: Swift.String?, prodName: Swift.String? = nil, complete: @escaping (AJLibrary.DeviceTokenModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func getCameraBindStatus(deviceId: Swift.String, complete: @escaping (AJLibrary.DeviceBindStatus?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func checkBindStatus(bindToken: Swift.String, complete: @escaping (AJLibrary.DeviceBindStatus?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func changeNickname(deviceId: Swift.String, nickname: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func fetchDeviceList(_ complete: @escaping (AJLibrary.DevicesModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func unbindCamera(_ deviceId: Swift.String, deviceType: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func deleteAccount(_ username: Swift.String, password: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func shareCamera(_ deviceId: Swift.String, complete: @escaping (AJLibrary.ShareCameraModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func addQuadGroup(_ name: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func deleQuadGroup(_ groupid: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func syncQuadGroup(_ group: AJLibrary.GroupsModel, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func renameQuadGroup(_ name: Swift.String, groupid: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func QuadGroupaddDevice(_ slot: Swift.String, did: Swift.String, groupid: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func QuadGroupDeleDevice(_ slot: Swift.String, groupid: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func bindInviteCamera(_ inviteCode: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func unbindInvitedCamera(_ deviceId: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func deleteShareEntry(_ deviceId: Swift.String, inviteCode: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func deleteShareAll(_ deviceId: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func disableShareEntry(_ deviceId: Swift.String, receiverUid: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func enableShareEntry(_ deviceId: Swift.String, receiverUid: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func getShareInvitesInfo(_ deviceId: Swift.String, complete: @escaping (AJLibrary.ShareUserInviteModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func pinnerAdd(_ deviceId: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func pinnerDel(_ deviceId: Swift.String, complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func createNewShare(_ params: [Swift.String : Any], complete: @escaping (AJLibrary.ShareSendReceiverModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func modifyNewShare(_ params: [Swift.String : Any], complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func delNewShare(_ params: [Swift.String : Any], complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func receiveNewShare(_ params: [Swift.String : Any], complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func delReceiveNewShare(_ params: [Swift.String : Any], complete: @escaping (AJLibrary.ErrorModel?) -> Swift.Void)
  public func getShareSendInfo(_ params: [Swift.String : Any], complete: @escaping ([AJLibrary.ShareSendReceiverModel]?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func getShareReceiveInfo(_ params: [Swift.String : Any], complete: @escaping ([AJLibrary.ShareSendReceiverModel]?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func baseNode(crCode: Swift.String, ctCode: Swift.String, complete: @escaping (AJLibrary.AccessNodeModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func accountNode(_ account: Swift.String, crCode: Swift.String, ctCode: Swift.String, accoutType: Swift.String, ext: [Swift.String : Swift.String]?, complete: @escaping (AJLibrary.AccessNodeModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FwUpgradeView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var dissmissBlock: (() -> ())?
  @_Concurrency.MainActor(unsafe) public var forceBlock: (() -> ())?
  @_Concurrency.MainActor(unsafe) public init(contentUrl: Swift.String)
  @_Concurrency.MainActor(unsafe) public func show()
  @objc @_Concurrency.MainActor(unsafe) public func dismiss()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class WVColor : UIKit.UIColor {
  @objc public class func WVMainColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVSelectBackColor(alpha: CoreFoundation.CGFloat = 0.24) -> UIKit.UIColor
  @objc public class func WVTimeLineColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVViewBackColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVLigntGrayViewBackColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVSettingViewBackColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVLineColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVDisabelBackColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVUnselectBackColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVYellowColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVDiableColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVBlackTextColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVCommentTextColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVWarnTextColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVWhiteTextColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc public class func WVImageBackColor(alpha: CoreFoundation.CGFloat = 1.0) -> UIKit.UIColor
  @objc override dynamic public init(white: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
  @objc override dynamic public init(hue: CoreFoundation.CGFloat, saturation: CoreFoundation.CGFloat, brightness: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
  @objc override dynamic public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
  @available(iOS 10.0, *)
  @objc override dynamic public init(displayP3Red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
  @objc override dynamic public init(cgColor: CoreGraphics.CGColor)
  @objc override dynamic public init(patternImage image: UIKit.UIImage)
  @available(iOS 5.0, *)
  @objc override dynamic public init(ciColor: CoreImage.CIColor)
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(iOS 13.0, *)
  @objc override dynamic public init(dynamicProvider: @escaping (UIKit.UITraitCollection) -> UIKit.UIColor)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SuccessResultModel : AJLibrary.ResultModel {
  @objc public var value: Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public enum DownloadStatus : ObjectiveC.NSInteger {
  case waiting
  case transcoding
  case transcodeSuccess
  case transcodeFailed
  case running
  case cancel
  case pause
  case failed
  case completed
  case prePause
  case preCancel
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
public typealias M3U8DownloaderHandler = (AJLibrary.M3U8Downloader) -> ()
public typealias TSDownloaderHandler = (AJLibrary.TSDownloader) -> ()
public typealias TaskHandler = (AJLibrary.M3U8Task) -> ()
public typealias ManagerHandler = (AJLibrary.CloudManager) -> ()
@_hasMissingDesignatedInitializers public class Help<Base> {
  @objc deinit
}
extension AJLibrary.Help where Base == Swift.Int64 {
  public func convertSpeedToString() -> Swift.String
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UIProblemView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var okBlock: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) public var cancelBlock: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) final public let cancelBtn: AJLibrary.UIBlueBorderButton
  @objc @_Concurrency.MainActor(unsafe) final public let okBtn: AJLibrary.UIContainedButton
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: AJLibrary.UIExplainLabel
  @_Concurrency.MainActor(unsafe) public var detailLabel: AJLibrary.UIExplainLabel
  @objc @_Concurrency.MainActor(unsafe) final public let errorImgView: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public init(detailTitle: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public func show()
  @objc @_Concurrency.MainActor(unsafe) public func dismiss()
  @objc deinit
}
public typealias EditBlock = (_ isEditing: Swift.Bool) -> ()
@objc @_inheritsConvenienceInitializers public class UploadManager : ObjectiveC.NSObject {
  @objc public static func uploadFile(_ deviceId: Swift.String, ageleNum: Swift.String, resourceType: Swift.String = "cam-viewangle", filePath: Swift.String, complete: @escaping (Swift.String?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
public let kWechatLoginAppId: Swift.String
public let kWechatLoginSecret: Swift.String
public let AppUniversalLinks: Swift.String
public let kAppkey: Swift.String
public let kAppSecret: Swift.String
public let IPCSupportDevType: Swift.Int
public let BatterySupportDevType: Swift.Int
public let AppName: Swift.String
public let CloudSaleRegion: Swift.Int
public let DefaultLanDiscoVendorCodes: Swift.String
public let FetchDeviceList: Swift.String
public let RefreshCloudOrders: Swift.String
public let RefreshCloudOrdersTable: Swift.String
public let RefreshUpgradingCameras: Swift.String
public let ShowSystemMessageDot: Swift.String
public let ShowNotifySupportCenterDot: Swift.String
public let RefreshHomeDeviceList: Swift.String
public let CentralRemoteNotification: Swift.String
public let RefreshLocalVideos: Swift.String
public let ShowCloudStorageBuyTips: Swift.String
public let ShowCloudStorageTabDot: Swift.String
public let HideCloudStorageTabDot: Swift.String
public let ShowAcceptShareNotification: Swift.String
public let ShowAlertMessageDot: Swift.String
public let HideAlertMessageDot: Swift.String
public let PushToTrailOrder: Swift.String
public let DisconnectBatterySingle: Swift.String
public let ShowMergeAccountDot: Swift.String
public let LaunchHomeShowCompleteAccount: Swift.String
public let CelularAlertTips: Swift.String
public let MotionAlertEnable: Swift.String
public let SystemMsgEnable: Swift.String
public let MarketMsgEnable: Swift.String
public let PushSoundFollowSystemEnable: Swift.String
public let SPTMallURL: Swift.String
public let HaveNewMallURL: Swift.String
public let CloudURL: Swift.String
public let HaveNewCloudURL: Swift.String
public let RefreshShareAccountList: Swift.String
public let RefreshAlertViewController: Swift.String
public let HaveShowedAddDeviceToCloudGuide: Swift.String
public let RefreshDeviceInfo: Swift.String
public let ShowCouponDot: Swift.String
public let CouponDeadlineKey: Swift.String
public let WechatLoginInResponseCode: Swift.String
public let WXLoginUnionKey: Swift.String
public let PhotoLoadingEndNotification: Swift.String
public let PhotoProgressNotification: Swift.String
public let BoundBatteryCountMaxNumber: Swift.Int
public enum NetEntrance {
  case addDevice
  case cameraSetting
  public static func == (a: AJLibrary.NetEntrance, b: AJLibrary.NetEntrance) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum NetConfigurationType : Swift.Int {
  case Cellular
  case QR
  case SoftAP
  case Eth
  case OnlineSetWiFi
  case FastBind
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AppVariable : ObjectiveC.NSObject {
  @objc public static let sharedInstance: AJLibrary.AppVariable
  @objc public var currentCameraId: Swift.String?
  public var netConfigEntrance: AJLibrary.NetEntrance
  public var netConfigurationType: AJLibrary.NetConfigurationType
  public var baseAddProdType: AJLibrary.ProductNameType
  public var refreshIPCCloudData: Swift.Bool
  public var refreshBatteryCloudData: Swift.Bool
  public var refreshAlertData: Swift.Bool
  public var appstoreVersion: Swift.String
  @objc public var cloudOrdersModel: AJLibrary.OrdersModel?
  @objc public var cloudPlansModel: AJLibrary.CloudPlansModel?
  public var pushToNotiMessage: Swift.Bool
  public var userHaveShared: Swift.Bool
  public var apnsModel: AJLibrary.ApnsModel?
  @objc public var startUpModel: AJLibrary.StartUpModel?
  public var preCountry: Swift.String?
  @objc public var loadAlertError: Swift.Bool
  public var haveSharedDeviceFromScheme: Swift.Bool
  public var haveLoadedMultiSdc: Swift.Bool
  public var dnsResolved: Swift.Bool
  @objc public var ShouldEncrypt: Swift.Bool
  @objc deinit
}
public struct CroppingParameters {
  public init(isEnabled: Swift.Bool = false, allowResizing: Swift.Bool = true, allowMoving: Swift.Bool = true, minimumSize: CoreFoundation.CGSize = CGSize(width: 60, height: 60))
}
@objc @_hasMissingDesignatedInitializers public class M3U8Downloader : ObjectiveC.NSObject {
  public var progressHandler: AJLibrary.M3U8DownloaderHandler?
  public var successHandler: AJLibrary.M3U8DownloaderHandler?
  public var failureHandler: AJLibrary.M3U8DownloaderHandler?
  public var progress: Swift.Float
  public var speed: Swift.Int64
  public var tsProgressPercent: Swift.Float
  public func start()
  public func pause()
  public func cancel()
  @objc deinit
}
public enum SupportLanguageOption : Swift.String {
  case Chinese
  case English
  case French
  case German
  case Italian
  case Japanese
  case Spanish
  case Turkish
  case Chinese_HK
  case Czech
  case Vietnamese
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class SupportLanguage : ObjectiveC.NSObject {
  public var language: AJLibrary.SupportLanguageOption {
    get
  }
  public func supportLanguage(_ localLanguage: Swift.String) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Chinese : AJLibrary.SupportLanguage {
  override public var language: AJLibrary.SupportLanguageOption {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class English : AJLibrary.SupportLanguage {
  override public var language: AJLibrary.SupportLanguageOption {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class French : AJLibrary.SupportLanguage {
  override public var language: AJLibrary.SupportLanguageOption {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class German : AJLibrary.SupportLanguage {
  override public var language: AJLibrary.SupportLanguageOption {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Italian : AJLibrary.SupportLanguage {
  override public var language: AJLibrary.SupportLanguageOption {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Japanese : AJLibrary.SupportLanguage {
  override public var language: AJLibrary.SupportLanguageOption {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Czech : AJLibrary.SupportLanguage {
  override public var language: AJLibrary.SupportLanguageOption {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Spanish : AJLibrary.SupportLanguage {
  override public var language: AJLibrary.SupportLanguageOption {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Turkish : AJLibrary.SupportLanguage {
  override public var language: AJLibrary.SupportLanguageOption {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Vietnamese : AJLibrary.SupportLanguage {
  override public var language: AJLibrary.SupportLanguageOption {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Chinese_HK : AJLibrary.SupportLanguage {
  override public var language: AJLibrary.SupportLanguageOption {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(TimezoneModel) public class TimezoneModel : AJLibrary.ResultModel, Foundation.NSCoding {
  @objc public var tzGmt: Swift.String?
  @objc public var tzName: Swift.String?
  @objc public var tzString: Swift.String?
  @objc public var tzUtc: Swift.String?
  @objc public var tzValue: Swift.String?
  @objc public var en: Swift.String?
  @objc public var zh: Swift.String?
  @objc public var fr: Swift.String?
  @objc public var de: Swift.String?
  @objc public var es: Swift.String?
  @objc public var pt: Swift.String?
  @objc public var jp: Swift.String?
  @objc public var it: Swift.String?
  @objc public var ko: Swift.String?
  @objc public var tr: Swift.String?
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public func GetImage(named: Swift.String) -> UIKit.UIImage?
@objc @_inheritsConvenienceInitializers public class AppUtils : ObjectiveC.NSObject {
  @objc public static let AJCWebViewBridgeInterface: Swift.String
  @objc public static var appVendorCode: Swift.String {
    @objc get
  }
  @objc public static var devicePrefixCode: Swift.String {
    @objc get
  }
  @objc public static func celularAlertEnable() -> Swift.Bool
  public static func setCelularAlertEnable(_ enable: Swift.Bool)
  public static func pushSettingEnable(localKey: Swift.String) -> Swift.Bool
  public static func setPushSettingEnable(_ localKey: Swift.String, enable: Swift.Bool)
  public static func guidePagesImage() -> (UIKit.UIImage?, UIKit.UIImage?, UIKit.UIImage?)
  public static func authIdError(_ laError: LocalAuthentication.LAError) -> Swift.String
  public static func jointTime(timestamp: Swift.String?, cameraId: Swift.String) -> Swift.String
  public static func months() -> [Swift.String]
  public static func mergeAccountDotKey() -> Swift.String
  public static func couponDeadlineUserDefaultsKey() -> Swift.String
  public static func hideMergeAccountDot()
  public static func isShowMergeAccountDot() -> Swift.Bool
  public static func isHomeShowCompleteAccountAlert() -> Swift.Bool
  public static func hideHomeCompleteAccountAlert()
  public static func appCountryCode() -> Swift.String
  public static func appContinentCode() -> Swift.String?
  public static func copyright() -> Swift.String?
  public static func setAppLanguages()
  @objc public class func objcDLog(_ message: Swift.String, filename: Swift.String = #file, methodName: Swift.String = #function, lineNumber: Swift.Int = #line)
  public class func setupLog()
  public class func doZip(at sourcePath: Swift.String, to destZipPath: Swift.String)
  @objc public class func goToTabbar(_ index: Swift.Int)
  public class func checkIsHaveNewMallUrl()
  public class func mallUrlUserDefaultsKey() -> Swift.String
  public class func isHaveNewMallURLUserDefaultsKey() -> Swift.String
  public class func checkIsHaveNewCloudUrl()
  public class func cloudUrlUserDefaultsKey() -> Swift.String
  public class func isHaveNewCloudURLUserDefaultsKey() -> Swift.String
  @objc public class func trialOrderReqnewAP()
  @objc public class func systemSettingOpen()
  @objc public class func systemAppSettingOpen()
  public class func playLocalVideo(_ videoPath: Foundation.URL)
  public static func jsonString(_ paramDic: [Swift.String : Any]) -> Swift.String
  public static func pushToChatViewController()
  public static func pushToCloudSet()
  @objc public static func appName() -> Swift.String
  @objc public static func loadDiagnoseUrls() -> [AJLibrary.DiagnoseTaskModel]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ResultModel : ObjectiveC.NSObject, AJLibrary.NetDecodable {
  @objc override required dynamic public init()
  open func mapping(mapper: HandyJSON.HelpingMapper)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ViewCloudView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc deinit
}
public let orderHistoryTableViewCellIdentifier: Swift.String
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CameraSettingViewController : AJLibrary.UIBaseTableViewController {
  @objc @_Concurrency.MainActor(unsafe) public var deviceId: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var fromPlay: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMove(toParent parent: UIKit.UIViewController?)
  @_Concurrency.MainActor(unsafe) @objc override public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) override public func initData()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AuthID {
  public static func isAuthIdEnabel(_ username: Swift.String?) -> Swift.Bool
  public static func setAuthIdEnabel(_ username: Swift.String?, enabel: Swift.Bool)
  public static func clearAuthIdSetting(_ username: Swift.String?)
  public static var isSupportFaceID: Swift.Bool {
    get
  }
  public static func evaluatePolicy(_ reply: @escaping (Swift.Bool) -> Swift.Void)
  public static func canEvaluatePolicy() -> (canEvaluate: Swift.Bool, error: Foundation.NSError?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DiagnoseServiceModel : AJLibrary.ResultModel {
  @objc public var serviceUrl: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DiagnoseTaskModel : AJLibrary.ResultModel {
  @objc public var services: [AJLibrary.DiagnoseServiceModel]
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DiagnoseTasksModel : AJLibrary.ResultModel {
  @objc public var diagnoseServices: [AJLibrary.DiagnoseTaskModel]
  @objc required dynamic public init()
  @objc deinit
}
@objc public enum AlarmType : ObjectiveC.NSInteger {
  case AlarmMove = 1
  case AlarmVisitor = 2
  case TamperAlarm = 4
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class AlarmSummaryModel : AJLibrary.ResultModel {
  @objc public var tags: Swift.String?
  @objc public var url: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class cognitivesModel : AJLibrary.ResultModel {
  @objc public var value: Swift.String?
  public var confidence: ObjectiveC.NSInteger?
  @objc public var type: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlarmModel : AJLibrary.ResultModel {
  @objc public var did: Swift.String?
  @objc public var ats: Swift.String?
  @objc public var ctime: Swift.String?
  @objc public var avs: [AJLibrary.AlarmSummaryModel]?
  @objc public var cognitives: [AJLibrary.cognitivesModel]?
  @objc public var cdate: Swift.String?
  @objc public var cts: Swift.String?
  @objc public var duration: Swift.String?
  @objc public var images: [AJLibrary.AlarmSummaryModel]?
  @objc public var tsStart: Swift.String?
  @objc public var tsEnd: Swift.String?
  @objc public var groupId: Swift.String?
  public func alarmHaveRead() -> Swift.Bool
  @objc public func coverImage() -> Swift.String?
  @objc public func alarmType() -> AJLibrary.AlarmType
  @objc public func videoUrl() -> Swift.String?
  @objc public func alertTime(formatter: Swift.String) -> Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AlarmsModel : AJLibrary.ResultModel {
  @objc public var alarms: [AJLibrary.AlarmModel]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlarmsCalendarModel : AJLibrary.ResultModel {
  @objc public var cdates: [Swift.String]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlarmListModel : AJLibrary.ResultModel {
  @objc public var alarms: [AJLibrary.AlarmModel]?
  @objc public var cts: Swift.String?
  @objc public var ctime: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(TaskModel) public class TaskModel : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ImageTypeUtils : ObjectiveC.NSObject {
  @objc public static func deviceModeIconImage(deviceMode: Swift.String?) -> UIKit.UIImage?
  @objc public static func objcDeviceIconImage(_ deviceId: Swift.String) -> UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class WebCloudUtils : ObjectiveC.NSObject {
  @objc public static let webStartUrl: Swift.String
  @objc public static let webGetUserInfo: Swift.String
  public static let webFinish: Swift.String
  public static let webSubscribe: Swift.String
  @objc public static let webStartEmail: Swift.String
  public static let webGetPlanInfo: Swift.String
  public static let webSetApp: Swift.String
  @objc public static func getUserInfo() -> Swift.String
  public static func getPlanInfo(_ order: AJLibrary.OrderModel?) -> Swift.String
  @objc public static func deserializeWebBridgeBody(json: Swift.String) -> AJLibrary.WebBridgeParamsModel?
  @objc public static func callbackJSData(_ callBackName: Swift.String, json: Swift.String) -> Swift.String
  @objc public static func isShowCloudWeb() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.Bundle {
  @objc public static func mixed_sourceBundle() -> Foundation.Bundle
  @objc public static func mixed_filePath(_ fileName: Swift.String) -> Swift.String?
}
extension UIKit.UIImage {
  @objc(mixed_imageNamed:) public static func mixed_image(named name: Swift.String) -> UIKit.UIImage?
  @objc(static_sdkimage:) public static func static_sdkimage(named name: Swift.String) -> UIKit.UIImage?
}
extension UIKit.UIFont {
  @objc(mixed_58SmileFontBold:) dynamic public class func mixed_58SmileFontBold(size fontSize: CoreFoundation.CGFloat) -> UIKit.UIFont?
  @objc(mixed_don58Regular:) dynamic public class func mixed_don58Regular(size fontSize: CoreFoundation.CGFloat) -> UIKit.UIFont?
  @objc(mixed_don58Medium:) dynamic public class func mixed_don58Medium(size fontSize: CoreFoundation.CGFloat) -> UIKit.UIFont?
}
extension UIKit.UIFont {
  public static let mixed_registerFonts: ()
  @objc(mixed_registerFont:filename:type:error:) public static func mixed_registerFont(in bundle: Foundation.Bundle?, name fileName: Swift.String, type: Swift.String?) throws
}
public enum RequestResult {
  case success(Any?)
  case failure(AJLibrary.ErrorModel)
}
@objc @_inheritsConvenienceInitializers open class AFNetClient : ObjectiveC.NSObject {
  public var afManager: Alamofire.SessionManager?
  open func send<T>(_ request: T, _ completionHandler: @escaping AJLibrary.CompletionHandler<T>) where T : AJLibrary.NetRequest
  @objc public var isReachableOnWWAN: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UIExplainLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public init(_ title: Swift.String? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UICommonLabel : UIKit.UILabel {
  @objc @_Concurrency.MainActor(unsafe) public init(_ title: Swift.String? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UIBoldLabel : UIKit.UILabel {
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class WebViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public var webView: WebKit.WKWebView {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var progressBar: UIKit.UIProgressView {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var urlRequest: Foundation.URLRequest {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var displaysWebViewTitle: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(urlRequest: Foundation.URLRequest, configuration: WebKit.WKWebViewConfiguration = WKWebViewConfiguration(), activities: [UIKit.UIActivity]? = nil)
  @objc @_Concurrency.MainActor(unsafe) convenience public init(url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@objc @_inheritsConvenienceInitializers public class MultiSdcModel : AJLibrary.ResultModel {
  @objc public var name: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(StartUpModel) public class StartUpModel : AJLibrary.ResultModel, Foundation.NSCoding {
  @objc public func curMultiSdc() -> AJLibrary.MultiSdcModel?
  public func supportOnvif(_ deviceMode: Swift.String?) -> Swift.Bool
  public func supportNetworkConfig(_ deviceMode: Swift.String?) -> Swift.String?
  public func isChina() -> Swift.Bool
  public func navTitle() -> Swift.String?
  public func clickedUrl() -> Swift.String?
  public func startTimeStamp() -> Swift.String?
  public func endTimeStamp() -> Swift.String?
  public func duration() -> Swift.Int
  public func imageUrl() -> Swift.String?
  public func getMallUrl() -> Swift.String?
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AttributeItem : ObjectiveC.NSObject {
  public var attributedString: Swift.String?
  public var font: UIKit.UIFont?
  public var color: UIKit.UIColor
  public var target: (() -> ())?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AttributeLabelView : UIKit.UITextView, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) public var attributes: [AJLibrary.AttributeItem] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var string: Swift.String
  @_Concurrency.MainActor(unsafe) public init(_ string: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class UIBaseTableViewController : AJLibrary.BaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) final public let tableView: UIKit.UITableView
  @_Concurrency.MainActor(unsafe) final public let cellId: Swift.String
  @_Concurrency.MainActor(unsafe) public var itemGroups: [AJLibrary.CommonTableGroup]
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func initData()
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) public func initUI()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias CameraShotCompletion = (UIKit.UIImage?) -> Swift.Void
public func takePhoto(_ stillImageOutput: AVFoundation.AVCaptureStillImageOutput, videoOrientation: AVFoundation.AVCaptureVideoOrientation, cameraPosition: AVFoundation.AVCaptureDevice.Position, cropSize: CoreFoundation.CGSize, completion: @escaping AJLibrary.CameraShotCompletion)
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TimingLightViewController : AJLibrary.UIBaseTableViewController, AJLibrary.TimePickerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var deviceId: Swift.String
  @_Concurrency.MainActor(unsafe) public var returnPolicies: (([AJLibrary.TimePolicy]) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var timePolice1: AJLibrary.TimePolicy
  @objc @_Concurrency.MainActor(unsafe) public var timePolice2: AJLibrary.TimePolicy
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override public func PopPrevious() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) override public func initData()
  @_Concurrency.MainActor(unsafe) @objc public func renewTime(_ newTime: Swift.String, tag: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NetAPI : ObjectiveC.NSObject {
  @objc public static let shared: AJLibrary.NetAPI
  public var haveLoadAppStartUpRequestSuccess: Swift.Bool
  public var haveFirstRefreshedToken: Swift.Bool
  public var sdcUrl: Swift.String
  @objc public var devSdcName: Swift.String
  public var agreementUrl: Swift.String
  public var privacyUrl: Swift.String
  public var cloudStorAgreementUrl: Swift.String
  public var helpGuideUrl: Swift.String
  public var appstoreInfoUrl: Swift.String
  public var oldWansviewAppstoreAddressUrl: Swift.String
  public var faqUrl: Swift.String
  public var uacUrl: Swift.String
  public var capUrl: Swift.String
  public var emcPortalUrl: Swift.String
  public var storePortalUrl: Swift.String
  public var wanIP: Swift.String
  public var sptMallUrl: Swift.String?
  public var hscUrl: Swift.String
  public var cloudBaseUrl: Swift.String?
  public var uacPortalUrl: Swift.String
  public var sdcPortalUrl: Swift.String
  @objc public var ipcCloudTrailUrl: Swift.String {
    @objc get
  }
  public var cloudPlanDetailExplainUrl: Swift.String {
    get
  }
  @objc public var ipcCloudExpireUrl: Swift.String {
    @objc get
  }
  public var ipcCloudPlanUrl: Swift.String {
    get
  }
  @objc public var ipcCloudTrailLittleUrl: Swift.String {
    @objc get
  }
  @objc public var ipcCloudExpireLittleUrl: Swift.String {
    @objc get
  }
  public var ipcCloudIntroductionUrl: Swift.String {
    get
  }
  public var ipcCloudActivityUrl: Swift.String {
    get
  }
  public var ipcCloudActivityTitleUrl: Swift.String {
    get
  }
  public var couponsUrl: Swift.String {
    get
  }
  public var haveNewMallUrl: Swift.Bool {
    get
    set
  }
  public var haveNewCloudUrl: Swift.Bool {
    get
    set
  }
  @objc final public let b2OriginalAPI: Swift.String
  @objc final public let b2DelegateAPI: Swift.String
  @objc public var sdkInitUrl: Swift.String
  @objc public var accessKeyID: Swift.String?
  @objc public var secretAccessKey: Swift.String?
  public func webCloudUrl(_ path: Swift.String) -> Swift.String
  public func setNetInfo(_ serverUrls: AJLibrary.ServerUrlsModel?)
  public func registRootSetting()
  public func initRootSetting() -> Swift.String?
  @objc deinit
}
public var AppVendorCode: Swift.String
extension UIKit.UIFont {
  public static func getFont(_ size: Swift.Double) -> UIKit.UIFont
  public static func getFont(_ name: Swift.String, _ size: Swift.Double) -> UIKit.UIFont
}
public let RefreshTokenApi: Swift.String
public let ChallenageApi: Swift.String
public let SignInApi: Swift.String
public let DeviceListApi: Swift.String
public let SmsSignUpApi: Swift.String
public let SignUpApi: Swift.String
public let AppStartupApi: Swift.String
public let TimezonesApi: Swift.String
public let SignoutApi: Swift.String
public let LogoutApi: Swift.String
public let ResetPassword: Swift.String
public let SmsResetPassword: Swift.String
public let AccountActiveApi: Swift.String
public let FastSignInApi: Swift.String
public let SDKInitApi: Swift.String
public let SDKVersion: Swift.String
@objc @_inheritsConvenienceInitializers public class BaseNetManager : ObjectiveC.NSObject {
  public func modelName() -> Swift.String
  public func agentName() -> Swift.String
  public func agentToken() -> Swift.String
  public func origin() -> Swift.String
  public func localeParam() -> Swift.String
  public func basicParams(_ dataDic: [Swift.String : Any]?) -> [Swift.String : Any]
  public func apiAdapter(_ deviceId: Swift.String, path: Swift.String) -> Swift.String
  public func basicParams(_ deviceId: Swift.String, dataDic: [Swift.String : Any]?) -> [Swift.String : Any]
  public func defaultTimezone() -> Swift.Int
  public func noSuchDeviceError() -> AJLibrary.ErrorModel
  @objc override dynamic public init()
  @objc deinit
}
public enum DeviceModeOption : Swift.String {
  case Device_K3C
  case Device_Y3C
  case Device_Y5C
  case Device_Y5S
  case Device_Q5S
  case Device_W5C
  case Device_W5S
  case Device_W5M
  case Device_B3C
  case Device_T3C
  case Device_R3C
  case Device_S40
  case Device_S60
  case Device_634
  case Device_637
  case Device_705
  case Device_758
  case Device_791
  case Device_Q5C
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ProductNameType : Swift.String {
  case Name_K3
  case Name_Q3S
  case Name_K5
  case Name_Q5
  case Name_B1
  case Name_B2
  case Name_B3
  case Name_B4
  case Name_D1
  case Name_W4
  case Name_T1
  case Name_W5
  case Name_Q6
  case Name_W6
  case Name_W9
  case Name_W7
  case Name_GLY_Y1
  case Name_GLY_G2
  case Name_GLY_G6
  case Name_GLY_G7
  case Name_GLY_Y4
  case Name_Q7
  case Name_P1
  case Name_R1
  case Name_G8
  case Name_WVC_Y1
  case Name_R2
  case Name_WVC_G6
  case Name_PM
  case Name_S40
  case Name_S60
  case Name_H20
  case Name_Dome_WIFI_Eth
  case Name_Outdoor_WIFI_Eth_2_Led
  case Name_Outdoor_WIFI_Eth_1_Led
  case Name_Battery_Camera_WIFI
  case Name_Ball_1_Led
  case Name_Ball_2_Led
  case Name_792JBU_1
  case Name_792JBU_2
  case Name_FLC
  case Name_830
  case Name_FDC1
  case Name_4G
  case Name_IPC
  case Name_Wob_812
  case Name_hgd_outdoor_1_led
  case Name_hgd_outdoor_2_led
  case Name_hgd_ball_1_Led
  case Name_hgd_ball_2_Led
  case Name_T8
  case Name_G4
  case Name_E3
  case Name_T4
  case Name_Dome_WIFI
  case Name_Indoor_WIFI
  public func ProductNameString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class CameraInfomation : ObjectiveC.NSObject {
  @objc public var summary: AJLibrary.CameraSummaryModel?
  @objc public var camera: AJLibrary.CameraModel?
  @objc public var conDevice: AJLibrary.ConDeviceModel?
  @objc public var orderModel: AJLibrary.OrdersModel?
  public func deviceType() -> AJLibrary.DeviceModeType?
  public func isInListTop() -> Swift.Bool
  @objc public func devAliasName() -> Swift.String?
  @objc public func deviceTypeName() -> Swift.String?
  public func productNameType() -> AJLibrary.ProductNameType
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DevicesManager : ObjectiveC.NSObject {
  @objc public static var sharedInstance: AJLibrary.DevicesManager
  @objc public var camerasArray: [Swift.String] {
    @objc get
    @objc set
  }
  public var homeListArray: [Swift.String] {
    get
  }
  public var haveLoadDevicesListSuccess: Swift.Bool
  @objc public var devicesArray: [Swift.String]
  public var hostCamerasArray: [Swift.String]
  public var sharedCamerasArray: [Swift.String]
  public var cameraInfomationDic: [Swift.String : AJLibrary.CameraInfomation] {
    get
    set
  }
  public var setNickname: Swift.Bool
  @objc public func cameraSummary(_ deviceId: Swift.String) -> AJLibrary.CameraSummaryModel?
  public func devGeneralInfo(_ deviceId: Swift.String) -> AJLibrary.DevGeneralModel?
  public func conDeviceInfo(_ deviceId: Swift.String) -> AJLibrary.ConDeviceModel?
  @objc public func cameraInfo(_ deviceId: Swift.String) -> AJLibrary.CameraModel?
  @objc public func userInvite(_ deviceId: Swift.String) -> AJLibrary.UserInviteModel?
  @objc public func cameraInfomation(_ deviceId: Swift.String) -> AJLibrary.CameraInfomation
  @discardableResult
  public func removeDeviceId(_ deviceId: Swift.String) -> [Swift.String]
  public func loadLocalData(devicesModel: AJLibrary.DevicesModel?)
  @objc public func fetchDevicesList(complete: @escaping (_ devicesList: [Swift.String], AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func fetchCamerasList(complete: @escaping (_ deviceId: Swift.String, AJLibrary.ErrorModel?) -> Swift.Void)
  public func loadLocalSummaryInfo(deviceIds: [Swift.String], deviceSummaryList: [AJLibrary.CameraSummaryModel])
  public func fetchDeviceSummaryInfo(deviceIds: [Swift.String], deviceTypesDic: [Swift.String : AJLibrary.DeviceModeType], complete: @escaping (_ summaryModel: AJLibrary.CamerasSummaryModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func fetchCamerasSummaryInfo(_ deviceId: Swift.String, deviceType: AJLibrary.DeviceModeType, sdcUrl: Swift.String, complete: @escaping (_ deviceId: Swift.String, AJLibrary.ErrorModel?) -> Swift.Void)
  public func fetchCamerasSummaryInfo(deviceIds: [Swift.String], deviceTypesDic: [Swift.String : AJLibrary.DeviceModeType], complete: @escaping (_ deviceId: Swift.String, AJLibrary.ErrorModel?) -> Swift.Void)
  public func fetchCamerasInfos(_ devicesIds: [Swift.String], deviceTypesDic: [Swift.String : AJLibrary.DeviceModeType], complete: @escaping (_ deviceId: Swift.String, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func fetchDeviceInfo(_ deviceId: Swift.String, complete: @escaping (_ deviceId: Swift.String, AJLibrary.ErrorModel?) -> Swift.Void)
  public func fetchCameraInfo(_ deviceId: Swift.String, deviceTypesDic: [Swift.String : AJLibrary.DeviceModeType] = [:], complete: @escaping (_ deviceId: Swift.String, AJLibrary.ErrorModel?) -> Swift.Void)
  public func refreshCamerasState(_ camerasIds: [Swift.String])
  public func fetchDevicesArray(modeDevicesTypes: [AJLibrary.DeviceModeType]) -> [Swift.String]
  public func fetchHostDevicesArray(modeDevicesTypes: [AJLibrary.DeviceModeType]) -> [Swift.String]
  public func fetchSharedDevicesArray(modeDevicesTypes: [AJLibrary.DeviceModeType]) -> [Swift.String]
  public func batteryGetParrentDId(_ deviceId: Swift.String) -> Swift.String?
  public func pinnerAddDevice(_ deviceId: Swift.String)
  public func pinnerDelDevice(_ deviceId: Swift.String)
  public func clearAccountCameras()
  @objc deinit
}
extension Foundation.Date {
  public var timeStamp: Swift.String {
    get
  }
  public var milliStamp: Swift.String {
    get
  }
  public var yyyyMMdd: Swift.String {
    get
  }
  public var yyyyMMddHHmm: Swift.String {
    get
  }
  public var yyyyMMddHHmmss: Swift.String {
    get
  }
  public var HHmm: Swift.String {
    get
  }
  public func postpone(year: Swift.Int = 0, month: Swift.Int = 0, days: Swift.Int = 0, returnFormat: Swift.String) -> Swift.String
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class WVThinTableCell : AJLibrary.WVTableCell {
  @_Concurrency.MainActor(unsafe) override open class func cellID() -> Swift.String
  @_Concurrency.MainActor(unsafe) override open class func cellHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) override open func loadUIs()
  @_Concurrency.MainActor(unsafe) override public func setTitleLabel()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum EMCAction : Swift.String {
  case EMC_WARN_CHARGE_FULL
  case EMC_WARN_POWER_LOW
  case EMC_WARN_TAMPER
  case EMC_ALERT
  case EMC_CAM_ROM
  case EMC_SYSTEM_MSG
  case EMC_KICK_OUT
  case EMC_CALL_OUT
  case EMC_LACK_FOOD
  case EMC_NONE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public let RemoteTFDownloadHost: Swift.String
public let LocalTFDownloadHost: Swift.String
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(M3U8Task) public class M3U8Task : ObjectiveC.NSObject {
  weak public var manager: AJLibrary.CloudManager?
  public var progressHandler: AJLibrary.TaskHandler?
  public var successHandler: AJLibrary.TaskHandler?
  public var failureHandler: AJLibrary.TaskHandler?
  public var statusHandler: AJLibrary.TaskHandler?
  public var cameraId: Swift.String?
  public var downloadPath: Swift.String?
  public var fileName: Swift.String
  public var taskId: Swift.String
  @objc public var error: (any Swift.Error)?
  public var taskModel: AJLibrary.TaskModel
  public var status: AJLibrary.DownloadStatus {
    get
    set
  }
  public var tsProgressPercent: Swift.Float
  @objc public var progress: Swift.Float {
    @objc get
  }
  public var speed: Swift.Int64 {
    get
  }
  @objc public class func createTask(_ taskId: Swift.String, deviceId: Swift.String, aliasName: Swift.String, intraPicture: Swift.String, downloadPath: Swift.String? = nil, m3u8Infos: [AJLibrary.M3U8InfoModel], progress: Swift.Float = 0) -> AJLibrary.M3U8Task
  public func start()
  public func remove()
  public func pause()
  public func completed()
  public func haveP2pUncompleteTasks() -> Swift.Bool
  @objc deinit
}
extension AJLibrary.M3U8Task {
  @discardableResult
  @objc dynamic public func progress(_ handler: @escaping AJLibrary.TaskHandler) -> Self
  @discardableResult
  @objc dynamic public func success(_ handler: @escaping AJLibrary.TaskHandler) -> Self
  @discardableResult
  @objc dynamic public func failure(_ handler: @escaping AJLibrary.TaskHandler) -> Self
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class JoinCloudViewController : AJLibrary.BaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, WebKit.WKScriptMessageHandler, WebKit.WKNavigationDelegate, MessageUI.MFMailComposeViewControllerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var removeJoinViewBlock: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) public var deviceId: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func loadCloudStorage(complete: (() -> ())?)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CommonTableItem : AJLibrary.WVTableItem {
  public var showTopLine: Swift.Bool
  public var showBottomLine: Swift.Bool
  public var isEnable: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LightingFreqModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class Toast : ObjectiveC.NSObject {
  @objc public static func promptMessage(_ message: Swift.String?)
  @objc public static func showHud()
  @objc public static func showLoadingHud()
  @objc public static func showMessageHud(_ message: Swift.String?)
  @objc public static func showMessageHud(_ message: Swift.String?, _ view: UIKit.UIView?)
  @objc public static func hideHud()
  @objc public static func hideHud(_ view: UIKit.UIView?)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AuthIDUtils {
  public static func localAuthIdStorageStatus(_ username: Swift.String?) -> Swift.Bool
  public static func isAuthIdEnabel(_ username: Swift.String?) -> (Swift.Bool, (any Swift.Error)?)
  public static func setAuthIdEnabel(_ username: Swift.String?, enabel: Swift.Bool)
  public static func clearAuthIdSetting(_ username: Swift.String?)
  public static var isSupportFaceID: Swift.Bool {
    get
  }
  public static func evaluatePolicy(_ reply: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  public static func canEvaluatePolicy() -> (canEvaluate: Swift.Bool, error: Foundation.NSError?)
  @objc deinit
}
public let TextFieldTableViewCellId: Swift.String
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CameraView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var currentPosition: AVFoundation.AVCaptureDevice.Position
  @_Concurrency.MainActor(unsafe) public func startSession()
  @_Concurrency.MainActor(unsafe) public func stopSession()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func configureZoom()
  @_Concurrency.MainActor(unsafe) public func capturePhoto(completion: @escaping AJLibrary.CameraShotCompletion)
  @_Concurrency.MainActor(unsafe) public func focusCamera(toPoint: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func cycleFlash()
  @_Concurrency.MainActor(unsafe) public func swapCameraInput()
  @_Concurrency.MainActor(unsafe) public func rotatePreview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CheckFlashViewController : AJLibrary.BaseViewController {
  @_Concurrency.MainActor(unsafe) public var networkConfig: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override public func PopPrevious() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class WeekPickerView : UIKit.UIView, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var confirmExcute: (([Swift.String]) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public init(weekdays: [Swift.String])
  @objc @_Concurrency.MainActor(unsafe) public func show()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DiscoverDeviceItem : ObjectiveC.NSObject {
  @objc public var deviceImage: UIKit.UIImage?
  @objc public var deviceType: Swift.String?
  @objc public var deviceId: Swift.String?
  @objc public var deviceSelect: (() -> Swift.Void)?
  @objc public var deviceIp: Swift.String?
  @objc public var deviceMask: Swift.String?
  @objc public var bindStatus: Swift.String?
  @objc public var bindAuthCode: Swift.String?
  @objc public var szProductName: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class WCapability : AJLibrary.ResultModel {
  @objc public var audioSample: Swift.String?
  @objc public var autoTrack: Swift.Bool
  @objc public var battery: Swift.String?
  @objc public var diagnose: Swift.String?
  @objc public var duplexVoice: Swift.String?
  @objc public var lvsType: Swift.String?
  @objc public var dualLens: Swift.Bool
  @objc public var encryptMode: Swift.String?
  @objc public var localStorRmt: Swift.String?
  @objc public var localStorageTypes: Swift.String?
  @objc public var networkConfig: Swift.String?
  @objc public var pirDetect: Swift.String?
  @objc public var ptz: Swift.String?
  @objc public var cognitiveTypes: Swift.String?
  @objc public var whiteLightCtl: Swift.String?
  @objc public var opticalZoom: Swift.String?
  @objc public var variFocus: Swift.String?
  @objc public var qualities: Swift.String?
  @objc public var dualLensZoomVerge: Swift.String?
  @objc public var streams: Swift.String?
  @objc public var voiceDetect: Swift.String?
  @objc public var privLiveStream: Swift.String?
  @objc public var onvif: Swift.Bool
  @objc public var mic: Swift.Bool
  @objc public var speaker: Swift.Bool
  @objc public var indicatorLightCtl: Swift.Bool
  @objc public var hibernate: Swift.Bool
  @objc public var wlanOnlineSet: Swift.Bool
  @objc public var pelco: Swift.Bool
  @objc public var newtz: Swift.Bool
  @objc public var pirDetectionRanges: Swift.String?
  @objc public var localRtsp: Swift.Bool
  @objc public var detectEnhance: Swift.Bool
  @objc public var manualNightVersion: Swift.Bool
  @objc public var floodlight: Swift.Bool
  @objc public var floodlightBrightCtrl: Swift.Bool
  @objc public var floodlightTimeCtrl: Swift.Bool
  @objc public var siren: Swift.Bool
  @objc public var genAlarmThumb: Swift.Bool
  @objc public var localStorFullDay: Swift.Bool
  @objc public var cloudStorFullDay: Swift.Bool
  @objc public var privateBase: Swift.Bool
  @objc public var privateRegion: Swift.Bool
  @objc public var nightVisionColorCtrl: Swift.Bool
  @objc public var lowPowerStorage: Swift.Bool
  @objc public var nightVision2: Swift.Bool
  @objc public var floodlightNightMode: Swift.Bool
  @objc public var floodlightTiming: Swift.Bool
  @objc public var floodlightDual: Swift.Bool
  @objc public var staticLocalIp: Swift.Bool
  @objc public var osdCtrl: Swift.Int
  @objc public var sims: Swift.Int
  @objc public var simsCtrl: Swift.Int
  @objc public var alarmMediaTypes: Swift.String?
  @objc public var showChargingCapacity: Swift.Bool
  @objc public var insideCognitiveTypes: Swift.String
  @objc public var soundDetect: Swift.Bool
  @objc public var lpRetriggerIntervalType: Swift.Bool
  @objc public var lvs1Qualities: Swift.String?
  public func haveInsideCognitiveHumanoid() -> Swift.Bool
  public func lvsQualitiesArr() -> [AJLibrary.QualityModel]
  public func haveInsideCognitiveVehicle() -> Swift.Bool
  public func haveInsideCognitivePet() -> Swift.Bool
  public func haveInsideCognitivePackage() -> Swift.Bool
  public func supportOSD() -> Swift.Bool
  @objc public func supportSims() -> Swift.Bool
  public func alarmMediaTypesSupportVideoAndImageConfig() -> Swift.Bool
  public func qualitiesArr() -> [AJLibrary.QualityModel]
  @objc public func creatQualitiesArr(qualitiesStr: Swift.String) -> [AJLibrary.QualityModel]
  public func isEthernetCamera() -> Swift.Bool
  public func supportTf() -> Swift.Bool
  @objc public func isOldLightDevice() -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
extension Swift.Double {
  public func cautionTSToString() -> Swift.String
}
extension UIKit.UIColor {
  convenience public init(rgb: Swift.Int, alpha: CoreFoundation.CGFloat = 1)
  convenience public init(_ r: CoreFoundation.CGFloat, _ g: CoreFoundation.CGFloat, _ b: CoreFoundation.CGFloat, _ a: CoreFoundation.CGFloat = 1)
  convenience public init(colorString: Swift.String)
  public func purecolorImage() -> UIKit.UIImage?
  public func purecolorImage(_ rect: CoreFoundation.CGRect) -> UIKit.UIImage?
}
@objc @_inheritsConvenienceInitializers public class ServerUrlsModel : AJLibrary.ResultModel {
  @objc public var wanIp: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(AccessNodeModel) public class AccessNodeModel : AJLibrary.ResultModel, Foundation.NSCoding {
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DetectiveLightViewController : AJLibrary.BaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var deviceId: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override public func PopPrevious() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CloudStorActivity : AJLibrary.ResultModel {
  public func startDateMMdd() -> Swift.String?
  public func endDateMMdd() -> Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RscUploadTokenModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func setAttribute(_ text: Swift.String, diffColorText: Swift.String, diffColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setAttribute(_ text: Swift.String, boldFontText: Swift.String, boldColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setAttribute(_ text: Swift.String, boldFontTexts: [Swift.String], boldColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setAttribute(_ text: Swift.String, boldFontTexts: [Swift.String], lineTexts: [Swift.String], boldColor: UIKit.UIColor)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(AllyModel) public class AllyModel : AJLibrary.ResultModel, Foundation.NSCoding {
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(OauthModel) public class OauthModel : AJLibrary.ResultModel, Foundation.NSCoding {
  @objc public var bizFlag: Swift.String?
  public func accountRegion() -> Swift.String?
  public func isChinaAccount() -> Swift.Bool
  public func getAlly(_ loginType: AJLibrary.LoginType = Login.getAccountLoginType()) -> AJLibrary.AllyModel?
  public func setExpiresTime()
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class TSDownloader : ObjectiveC.NSObject {
  public var index: Swift.Int
  public var fileName: Swift.String?
  public var filePath: Swift.String?
  public var duration: Swift.Int
  public var URLString: Swift.String?
  public var progress: Swift.Float
  public var speed: Swift.Int64
  public func start(progressHandler: AJLibrary.TSDownloaderHandler? = nil, successHandler: AJLibrary.TSDownloaderHandler? = nil, failureHandler: AJLibrary.TSDownloaderHandler? = nil)
  public func pause()
  public func cancel()
  @objc deinit
}
extension AJLibrary.TSDownloader {
  public func parseSpeed()
}
@objc @_inheritsConvenienceInitializers public class ActionDetectModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SliderItem : AJLibrary.CommonTableItem {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AJQRBinderManager : ObjectiveC.NSObject {
  @objc public static let shared: AJLibrary.AJQRBinderManager
  @objc public var timeout: Swift.Double
  @objc public func getToken(_ success: @escaping ((Swift.String) -> ()), failure: @escaping ((AJLibrary.ErrorModel?) -> ()))
  @objc public func checkBindStatus(_ token: Swift.String, success: @escaping ((Swift.String) -> ()), failure: @escaping ((AJLibrary.ErrorModel?) -> ()))
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum BindStatus : Swift.Int {
  case Success = 0
  case Binding = 1
  case BoundByOther = 7
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class DeviceTokenModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DeviceBindStatus : AJLibrary.ResultModel {
  public func bindStatus() -> AJLibrary.BindStatus
  public func sdcName() -> Swift.String?
  public func bindSdcUrl() -> Swift.String?
  public func username() -> Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UIRefreshView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var refreshBlock: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) final public let errorImageView: UIKit.UIImageView
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CloudManager : ObjectiveC.NSObject {
  @objc public static var shared: AJLibrary.CloudManager
  public var maxConcurrentTasksLimit: Swift.Int
  public var successHandler: AJLibrary.ManagerHandler?
  public var failureHandler: AJLibrary.ManagerHandler?
  public var progressHandler: AJLibrary.ManagerHandler?
  public var tasks: [AJLibrary.M3U8Task] {
    get
  }
  public var runningTasks: [AJLibrary.M3U8Task] {
    get
  }
  public var completedTasks: [AJLibrary.M3U8Task] {
    get
  }
  public var waitingTasks: [AJLibrary.M3U8Task] {
    get
  }
  public var pauseTasks: [AJLibrary.M3U8Task] {
    get
  }
  public var failedTasks: [AJLibrary.M3U8Task] {
    get
  }
  public var downloadingTasks: [AJLibrary.M3U8Task] {
    get
  }
  public func initLocalData()
  @objc deinit
}
extension AJLibrary.CloudManager {
  @discardableResult
  @objc dynamic public func runTask(_ task: AJLibrary.M3U8Task) -> Swift.Bool
}
extension AJLibrary.CloudManager {
  public func saveDownload()
}
extension AJLibrary.CloudManager {
  public func fetchTask(_ taskId: Swift.String?) -> AJLibrary.M3U8Task?
  public func start(_ taskId: Swift.String)
  public func remove(_ taskId: Swift.String)
  public func pause(_ taskId: Swift.String)
}
extension AJLibrary.CloudManager {
  public func totalStart()
  public func totalPause()
  public func totalRemove()
}
extension AJLibrary.CloudManager {
  public func taskDidCancelOrRemove(_ taskId: Swift.String)
  public func completed()
  @objc dynamic public func isUncomplete(_ deviceId: Swift.String) -> Swift.Bool
  @objc dynamic public func haveP2pUncompleteTasks() -> Swift.Bool
}
extension AJLibrary.CloudManager {
  @discardableResult
  public func progress(_ handler: @escaping AJLibrary.ManagerHandler) -> Self
  @discardableResult
  public func success(_ handler: @escaping AJLibrary.ManagerHandler) -> Self
  @discardableResult
  public func failure(_ handler: @escaping AJLibrary.ManagerHandler) -> Self
}
public let CameraAddTableViewCellIdentifier: Swift.String
public let CameraAddCellHeight: CoreFoundation.CGFloat
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AJCWebView : WebKit.WKWebView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class WebParams : AJLibrary.ResultModel {
  @objc public var url: Swift.String?
  @objc public var callbackname: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class WebBridgeParamsModel : AJLibrary.ResultModel {
  @objc public var name: Swift.String?
  @objc public var param: AJLibrary.WebParams?
  public func subsSuccess() -> Swift.Bool
  public func toOutBrowser() -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ApnsModel : AJLibrary.ResultModel {
  public func alertType() -> AJLibrary.EMCAction
  @objc required dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CameraOffView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var openCameraBlock: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) public var isSharedCamera: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc deinit
}
public let SegmentedSpaceWidth: Swift.Int
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class UIEdgeInsetsLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public var edgeInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect, limitedToNumberOfLines numberOfLines: Swift.Int) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func drawText(in rect: CoreFoundation.CGRect)
  @objc deinit
}
public enum Validate {
  case email(Swift.String)
  case phoneNum(Swift.String)
  case carNum(Swift.String)
  case username(Swift.String)
  case password(Swift.String)
  case nickname(Swift.String)
  case URL(Swift.String)
  case IP(Swift.String)
  public var isRight: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CalloutManager : ObjectiveC.NSObject {
  @objc public static let shared: AJLibrary.CalloutManager
  @objc public var isCalloutPresent: Swift.Bool
  @objc public func pushToCallout(_ deviceId: Swift.String, countDown: Swift.Int = 60)
  @objc deinit
}
public protocol LogLevel {
  func myDescription(level: Swift.Int) -> Swift.String
}
public func CWLog<T>(_ message: T, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
extension Swift.Optional : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Swift.Dictionary : AJLibrary.LogLevel {
  public var description: Swift.String {
    get
  }
  public func myDescription(level: Swift.Int) -> Swift.String
}
extension Swift.Array : AJLibrary.LogLevel {
  public func myDescription(level: Swift.Int) -> Swift.String
  public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class CommonTableGroup : AJLibrary.WVTableGroup {
  public var heightForHeader: CoreFoundation.CGFloat
  public var heightForFooter: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc deinit
}
@objc extension UIKit.UIButton {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imageToRight()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imageToLeft()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imageToUp()
}
@objc @_inheritsConvenienceInitializers public class FBAnalyticsEventId : ObjectiveC.NSObject {
  @objc public static let playing_net_type: Swift.String
  @objc public static let playing_request_type: Swift.String
  @objc public static let playing_duration_time: Swift.String
  @objc public static let replay_duration_time: Swift.String
  @objc public static let replay_down_num: Swift.String
  @objc public static let replay_delete_num: Swift.String
  public static let alert_click_video_num: Swift.String
  public static let diagnose_num: Swift.String
  public static let set_camera_restart_num: Swift.String
  public static let set_camera_restore_fac_num: Swift.String
  public static let set_camera_delete_num: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FBAnalytics : ObjectiveC.NSObject {
  @objc public class func logEvent(_ name: Swift.String, parameters: Swift.Dictionary<Swift.String, Any>?)
  @objc public class func logClickEvent(_ parameters: Swift.Dictionary<Swift.String, Any>)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class WVFont : ObjectiveC.NSObject {
  @objc public class func boldFont(_ size: Swift.Double) -> UIKit.UIFont
  @objc public class func semiboldFont(_ size: Swift.Double) -> UIKit.UIFont
  @objc public class func regularFont(_ size: Swift.Double) -> UIKit.UIFont
  @objc public class func mediumFont(_ size: Swift.Double) -> UIKit.UIFont
  @objc public class func robotoRegularFont(_ size: Swift.Double) -> UIKit.UIFont
  @objc override dynamic public init()
  @objc deinit
}
public struct WVRegex {
  public init(pattern: Swift.String)
  public func match(_ input: Swift.String) -> Swift.Bool
}
public func DLog<T>(_ message: T, filename: Swift.String = #file, methodName: Swift.String = #function, lineNumber: Swift.Int = #line)
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public var dataHasChanged: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AutoLightViewController : AJLibrary.BaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var deviceId: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override public func PopPrevious() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.URL {
  public func changeQuery(_ name: Swift.String, toValue value: Swift.String) -> Foundation.URL
}
@objc @_inheritsConvenienceInitializers public class ActionItem : ObjectiveC.NSObject {
  @objc public var title: Swift.String?
  @objc public var excute: (() -> ())?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UICustomAlertView : UIKit.UIView, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, UIKit.UIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var DissmissAction: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) public init(actionItems: [AJLibrary.ActionItem])
  @objc @_Concurrency.MainActor(unsafe) public func show()
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class EmailCheckModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class EmcPortalNetManager : AJLibrary.BaseNetManager {
  @objc public static let shared: AJLibrary.EmcPortalNetManager
  public func fetchSystemMessageStatus(complete: @escaping (AJLibrary.SystemMsgStatusModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func fetchSystemMessageList(complete: @escaping (AJLibrary.SystemMsgListModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func fetchAlarmsSummary(complete: @escaping (AJLibrary.AlarmsModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func fetchAlarmsSurvey(params: [Swift.String : Any], complete: @escaping (AJLibrary.AlarmsModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func systemMessageGotone(msgid: Swift.String, complete: @escaping (AJLibrary.SysMsgGoModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AppFeature : ObjectiveC.NSObject {
  public static var dnsResolved: Swift.Bool {
    get
  }
  public class func showWelcome() -> Swift.Bool
  @objc public class func isPurpose() -> Swift.Bool
  public class func renewAppstore(_ complete: (() -> ())?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SnapshotUrlReauthModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
public let CommonTableCellId: Swift.String
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CommonTableCell : AJLibrary.WVThinTableCell {
  @_Concurrency.MainActor(unsafe) public var materailSwitch: Material.Switch
  @_Concurrency.MainActor(unsafe) final public let dotView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) override public var leftIconGap: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override public func loadUIs()
  @_Concurrency.MainActor(unsafe) @objc override public func valueChanged()
  @_Concurrency.MainActor(unsafe) override public func setupSwitch()
  @_Concurrency.MainActor(unsafe) public func setTopLine()
  @_Concurrency.MainActor(unsafe) public func setDotView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ImageDownloadManager : ObjectiveC.NSObject {
  @objc public static func downloadImages(_ imageUrls: [Swift.String], toPath path: Swift.String, complete: (() -> ())?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ProductModel : AJLibrary.ResultModel {
  @objc public var serviceMonths: Swift.String?
  @objc public var buyMode: Swift.String?
  @objc public var unit: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CloudDeviceModel : AJLibrary.ResultModel {
  @objc public var did: Swift.String?
  @objc public var devGatewayUrl: Swift.String?
  @objc public var devCloudStorUrl: Swift.String?
  @objc public var devTzName: Swift.String?
  @objc public var devTzValue: Swift.String?
  @objc public var devVendorCode: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
public enum OrderStatusEnum : Swift.String {
  case isInUse
  case isCanceled
  case isExpired
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class OrderModel : AJLibrary.ResultModel {
  @objc public var product: AJLibrary.ProductModel?
  @objc public var status: Swift.String?
  @objc public var payMode: Swift.String?
  @objc public var devices: [AJLibrary.CloudDeviceModel]?
  @objc public var trialPeriod: Swift.String?
  @objc public var validTsStart: Swift.String?
  @objc public var validTsEnd: Swift.String?
  @objc public var name: Swift.String?
  public func isFullTimeOrder() -> Swift.Bool
  public func isFromAjcard() -> Swift.Bool
  public func isIpcType() -> Swift.Bool
  public func isTrialPlan() -> Swift.Bool
  public func isPrepay() -> Swift.Bool
  public func isSubscription() -> Swift.Bool
  public func isValid() -> Swift.Bool
  public func isReallyCancelled() -> Swift.Bool
  public func isInUseCanceled() -> Swift.Bool
  public func isExpired() -> Swift.Bool
  public func isAiPlan() -> Swift.Bool
  public func orderStatus() -> AJLibrary.OrderStatusEnum
  public func orderPrice() -> Swift.String
  public func orderUnit() -> Swift.String
  public func subscriptionUnit() -> Swift.String
  public func startTime(formatter: Swift.String) -> Swift.String
  public func validTsEndTime() -> Swift.String?
  public func validityPeriod() -> Swift.String
  public func leftMaturityDays() -> Swift.String
  public func imageString() -> Swift.String
  public func backSmallBasicImageString() -> Swift.String
  public func planName() -> Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class OrdersModel : AJLibrary.ResultModel {
  @objc public var orders: [AJLibrary.OrderModel]?
  @objc public var relDids: [Swift.String]?
  @objc public var activityPolicy: AJLibrary.CloudStorActivity?
  public func haveCoupons() -> Swift.Bool
  @objc public func haveCloud() -> Swift.Bool
  public func devCloudStorUrl(deviceId: Swift.String) -> Swift.String?
  public func devTzValue(deviceId: Swift.String) -> Swift.String?
  @objc public func orderForDevice(_ deviceId: Swift.String) -> AJLibrary.OrderModel?
  @objc public func haveTrial() -> Swift.Bool
  public func combineWithTrial() -> Swift.Bool
  @objc public func isShowExperienceTips() -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class OrderStatusModel : AJLibrary.ResultModel {
  @objc public var status: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
public let DevConfigApi: Swift.String
@_hasMissingDesignatedInitializers public class VolumeControl {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class JoinCloudView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var goCheckBlock: (() -> ())?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc @_Concurrency.MainActor(unsafe) public func show()
  @objc @_Concurrency.MainActor(unsafe) public func dismiss()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class WVTableItem : ObjectiveC.NSObject {
  public var icon: UIKit.UIImage?
  public var title: Swift.String?
  public var comment: Swift.String?
  public var showAccessory: Swift.Bool
  public var accessoryCustomImage: UIKit.UIImage?
  public var switchOn: Swift.Bool
  public var switchTarget: (() -> Swift.Void)?
  public var switchEnable: Swift.Bool
  public var execute: (() -> Swift.Void)?
  public var style: Swift.String?
  public var hideSepratorLine: Swift.Bool
  public var height: CoreFoundation.CGFloat?
  public var titleColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AJSoftAPBinderManager : ObjectiveC.NSObject {
  @objc public static let shared: AJLibrary.AJSoftAPBinderManager
  @objc public var timeout: Swift.Double
  @objc public func softAPConnect(_ ssid: Swift.String, password: Swift.String, success: @escaping (() -> ()), failure: @escaping ((AJLibrary.ErrorModel?) -> ()))
  @objc public func connect(_ curSsid: Swift.String, success: (([AJLibrary.WiFiListModel]?) -> ())?, failure: ((AJLibrary.ErrorModel?) -> ())?)
  @objc override dynamic public init()
  @objc deinit
}
public func GetWidth(_ width: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
public func GetHeight(_ height: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
@objc @_inheritsConvenienceInitializers open class Utils : ObjectiveC.NSObject {
  public static func getUserSSID() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UIBottomToolButton : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var buttonAction: (() -> ())?
  @_Concurrency.MainActor(unsafe) public var button: AJLibrary.UIContainedButton?
  @_Concurrency.MainActor(unsafe) public var commonLabel: AJLibrary.UICommonLabel?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BatteryCloudSetViewController : AJLibrary.BaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc @_Concurrency.MainActor(unsafe) public var deviceId: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override public func PopPrevious() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public let DeviceCellHeight: CoreFoundation.CGFloat
public let CellSubUIDistance: Swift.Int
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CloudBuyView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var refreshBlock: (() -> ())?
  @_Concurrency.MainActor(unsafe) final public let cloudStatusTips: AJLibrary.UIBoldLabel
  @_Concurrency.MainActor(unsafe) public var buyBtn: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) final public let detailTips: AJLibrary.UICommonLabel
  @_Concurrency.MainActor(unsafe) final public let cnTrail: AJLibrary.UIContainedButton
  @_Concurrency.MainActor(unsafe) final public let learnMoreBtn: AJLibrary.UIFlatButton
  @objc @_Concurrency.MainActor(unsafe) final public let backImgV: UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public var webview: AJLibrary.AJCWebView
  @objc @_Concurrency.MainActor(unsafe) public var noDataView: AJLibrary.UIRefreshView?
  @objc @_Concurrency.MainActor(unsafe) public var activityPolicy: AJLibrary.CloudStorActivity? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var learnMoreBlock: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) public var buyBlock: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) public var trailBlock: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) public init(_ haveTrial: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func hideImage()
  @objc @_Concurrency.MainActor(unsafe) public func loadWebView(_ urlString: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func showRefresh()
  @objc @_Concurrency.MainActor(unsafe) public func showNoImageRefresh()
  @objc @_Concurrency.MainActor(unsafe) public func hideRefresh()
  @_Concurrency.MainActor(unsafe) public func initUIs(_ haveTrial: Swift.Bool)
  @objc deinit
}
public func CameraLocalizedString(_ key: Swift.String) -> Swift.String
public func CommonCameraLocalizedString(_ key: Swift.String) -> Swift.String
public let NavigationHeight: (CoreFoundation.CGFloat)
public let StatusBarHeight: CoreFoundation.CGFloat
public let isIPhoneX: Swift.Bool
public let IphoneXBottom: CoreFoundation.CGFloat
@objc @_inheritsConvenienceInitializers public class CameraUtils : ObjectiveC.NSObject {
  @objc public static var isNetworkConnect: Swift.Bool {
    @objc get
  }
  @objc public static var isReachableOnWWAN: Swift.Bool {
    @objc get
  }
  @objc public static var isReachableOnEthernetOrWiFi: Swift.Bool {
    @objc get
  }
  @objc public static func localizedString(_ key: Swift.String) -> Swift.String
  @objc public static func CommonlocalizedString(_ key: Swift.String) -> Swift.String
  @objc public static func deviceModeToProdNameString(_ deviceMode: Swift.String?) -> Swift.String
  @objc public static func isValidProdName(_ productName: Swift.String?) -> Swift.Bool
  @objc public static func createQRImage(qrString: Swift.String?, size: CoreFoundation.CGSize) -> UIKit.UIImage?
  public func playLocalSound(fileName: Swift.String, type: Swift.String)
  public class func systemVolumn() -> UIKit.UISlider?
  public class func conver(value: Swift.String) -> Swift.String
  @objc public static func isEmptyStr(_ str: Swift.String?) -> Swift.Bool
  @objc public static func currentLanguage() -> Swift.String
  @objc public static func getSupportDevType(_ deviceId: Swift.String) -> ObjectiveC.NSInteger
  @objc public static func isBatteryType(_ deviceId: Swift.String) -> Swift.Bool
  public static func isBatteryType(_ dType: AJLibrary.DeviceModeType?) -> Swift.Bool
  @objc public static func objcIsBatteryType(_ dType: AJLibrary.DeviceModeType) -> Swift.Bool
  @objc public static func getDeviceModeType(_ deviceId: Swift.String) -> AJLibrary.DeviceModeType
  public static func loginLogoImage() -> UIKit.UIImage?
  public static func meLogoImage() -> UIKit.UIImage?
  public static func getCountryCode(_ code: Swift.String) -> Swift.String
  public static func deviceConfigSoundOK() -> Swift.String
  public static func cameraQrScanSound() -> Swift.String
  public static func stringToProdNameType(_ prodName: Swift.String) -> AJLibrary.ProductNameType
  public static func containVendor(_ vendor: Swift.String) -> Swift.Bool
  public static func settingNeedWakeUp(_ deviceId: Swift.String) -> Swift.Bool
  public static func prodNames(from vendor: Swift.String) -> [Swift.String]
  @objc public static var currentController: UIKit.UIViewController? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public typealias ActionSheetAction = () -> Swift.Void
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UIActionSheetView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var sureBtn: AJLibrary.UIContainedButton!
  @_Concurrency.MainActor(unsafe) final public let detailLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @objc @_Concurrency.MainActor(unsafe) public init(title: Swift.String, detail: Swift.String, cancelButtonTitle: Swift.String, destructiveButtonTitle: Swift.String, cancleAction: @escaping AJLibrary.ActionSheetAction, sureAction: @escaping AJLibrary.ActionSheetAction)
  @objc @_Concurrency.MainActor(unsafe) public func show()
  @objc deinit
}
public let ScreenWidth: CoreFoundation.CGFloat
public let ScreenHeight: CoreFoundation.CGFloat
public let isPhoneX: Swift.Bool
@objc @_inheritsConvenienceInitializers public class ObjUIAdapt : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public class Subtitles : ObjectiveC.NSObject {
  public init(file filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8)
  @objc public init(subtitles string: Swift.String)
  @objc public func searchSubtitles(at time: Foundation.TimeInterval) -> Swift.String?
  @objc deinit
}
extension AVKit.AVPlayerViewController {
  @_Concurrency.MainActor(unsafe) public var subtitleLabel: UIKit.UILabel? {
    get
    set(value)
  }
  @_Concurrency.MainActor(unsafe) public func addSubtitles() -> Self
  @_Concurrency.MainActor(unsafe) public func open(fileFromLocal filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8)
  @_Concurrency.MainActor(unsafe) public func open(fileFromRemote filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8)
  @_Concurrency.MainActor(unsafe) public func show(subtitles string: Swift.String)
  @_Concurrency.MainActor(unsafe) public func showByDictionary(dictionaryContent: Foundation.NSMutableDictionary)
  @_Concurrency.MainActor(unsafe) public func addPeriodicNotification(parsedPayload: Foundation.NSDictionary)
}
@objc @_inheritsConvenienceInitializers public class SystemMsgListModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SysMsgGoModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UIAnimation : ObjectiveC.NSObject {
  @objc public static func showHud()
  public static func showMessageHud(_ message: Swift.String?, _ view: UIKit.UIView?)
  @objc public static func showSmallHud(_ view: UIKit.UIView?, top: ObjectiveC.NSInteger = -1)
  @objc public static func showSmallHud(_ name: Swift.String, view: UIKit.UIView?, top: ObjectiveC.NSInteger = -1)
  @objc public static func hideHud()
  @objc public static func hideHud(_ view: UIKit.UIView?)
  @objc public static func showLoading(_ view: UIKit.UIView?)
  @objc public static func showAnimation(name: Swift.String)
  @objc public static func showAnimation(_ name: Swift.String, _ view: UIKit.UIView?)
  public static func hideAnimation()
  @objc public static func hideAnimation(_ view: UIKit.UIView?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TimeZoneDataModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TimeConfigModel : AJLibrary.ResultModel {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BaseViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setNavigation()
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open func PopPrevious() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) public func PopToRootViewController()
  @_Concurrency.MainActor(unsafe) public func PopToViewController<T>(_ viewControllerType: T.Type) where T : UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) public func Dissmiss()
  @_Concurrency.MainActor(unsafe) public func DismissWithCompletion(_ completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func PresentViewController(_ vc: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) public func PresentViewController(_ vc: UIKit.UIViewController, completion: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func PushViewController(_ vc: UIKit.UIViewController)
  @objc @_Concurrency.MainActor(unsafe) public class func TopViewController() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) public func popGestureClose()
  @_Concurrency.MainActor(unsafe) public func popGestureOpen()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum OrderType : Swift.Int {
  case upsert = 1
  case remove = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EMCNetManager : AJLibrary.BaseNetManager {
  @objc public var pushsetStartBlock: (([Swift.String : Any]) -> ())?
  @objc public static let shared: AJLibrary.EMCNetManager
  @objc public func fetchAlarmsCalendar(_ deviceId: Swift.String, tzValue: Swift.String, accessKey: Swift.String, complete: @escaping (AJLibrary.AlarmsCalendarModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func fetchFeedLogs(_ deviceId: Swift.String, ctime: Swift.String, limit: ObjectiveC.NSInteger, complete: @escaping (AJLibrary.feedLogsModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func fetchAlarmList(_ deviceId: Swift.String, accessKey: Swift.String, tzValue: Swift.String, today: ObjectiveC.NSInteger, todayFirst: ObjectiveC.NSInteger, ctime: ObjectiveC.NSInteger, cdate: Swift.String, limit: ObjectiveC.NSInteger, complete: @escaping (AJLibrary.AlarmListModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  public func removeShareRel(_ deviceId: Swift.String, slaveUid: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func pushSetting(_ deviceId: Swift.String, aliasName: Swift.String, devEmcUrl: Swift.String, orderType: AJLibrary.OrderType, clearPushToken: Swift.Bool = false, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func deleteAlarmsMessage(_ deviceId: Swift.String, accessKey: Swift.String, cdate: Swift.String, ctss: [Swift.String], devTzName: Swift.String, complete: @escaping (AJLibrary.SuccessResultModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc deinit
}
public let GatewayCellHeight: CoreFoundation.CGFloat
public enum OnlineSetResult : Swift.Int {
  case NotDefine
  case Success
  case ErrorPassword
  case NoneSsid
  case OtherError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class WlanOnlineResultModel : AJLibrary.ResultModel {
  public var onlineSetResult: AJLibrary.OnlineSetResult {
    get
  }
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PlayViewDataManager : ObjectiveC.NSObject {
  @objc public static var sharedInstance: AJLibrary.PlayViewDataManager
  @objc public var isUsingTfLcalURL: Swift.Bool
  @objc public var quadGroups: [AJLibrary.GroupsModel]?
  @objc public func getCameraName(_ deviceId: Swift.String) -> Swift.String?
  @objc public func getLocalPlayUrl(_ deviceId: Swift.String, quality: Swift.String, complete: @escaping (Swift.String?, Swift.String?) -> Swift.Void)
  @objc public func getUPNPPlayUrl(_ deviceId: Swift.String, quality: Swift.String, complete: @escaping (Swift.String?, Swift.String?) -> Swift.Void)
  @objc public func getP2PserverStart(_ deviceId: Swift.String, quality: Swift.String, complete: @escaping (Swift.String?, Swift.String?, Swift.String?) -> Swift.Void)
  @objc public func getP2PServerUrl(_ deviceId: Swift.String) -> Swift.String?
  @objc public func getBatteryParentDId(_ deviceId: Swift.String) -> Swift.String?
  @objc public func getCloudVideoList(_ deviceId: Swift.String, dayStartTs: Swift.Double, dayEndTs: Swift.Double, complete: @escaping ([AJLibrary.CloudStorageModel]?, Swift.String?) -> Swift.Void)
  @objc public func getCloudVideoList_ex(_ masterUid: Swift.String, deviceId: Swift.String, dayStartTs: Swift.Double, dayEndTs: Swift.Double, complete: @escaping ([AJLibrary.CloudStorageModel]?, Swift.String?) -> Swift.Void)
  @objc public func getGroupVideoCalendar(_ deviceId: Swift.String, complete: @escaping ([Swift.String]?, Swift.String?) -> Swift.Void)
  @objc public func getGroupVideoCalendar_ex(_ masterUid: Swift.String, deviceId: Swift.String, complete: @escaping ([Swift.String]?, Swift.String?) -> Swift.Void)
  @objc public func deleteCloudVideoList(_ deviceId: Swift.String, start: AJLibrary.CloudStorageDeleModel, end: AJLibrary.CloudStorageDeleModel, relDays: AJLibrary.CloudStorageDeleRealDayModel, complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func getLocalVideoList(_ deviceId: Swift.String, dayStartTs: Swift.Double, dayEndTs: Swift.Double, localAddress: Swift.String, complete: @escaping ([AJLibrary.CloudStorageModel]?, Swift.String?) -> Swift.Void)
  @objc public func getLocalGroupVideoCalendar(_ deviceId: Swift.String, complete: @escaping ([Swift.String]?, Swift.String?) -> Swift.Void)
  @objc public func deleteLocalVideoList(_ deviceId: Swift.String, start: AJLibrary.CloudStorageDeleModel, end: AJLibrary.CloudStorageDeleModel, relDays: AJLibrary.CloudStorageDeleRealDayModel, complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func deleteBatteryCamLocalVideoList(_ deviceId: Swift.String, deleteList: [AJLibrary.BatteryCamDeleModel], complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func deleteAlarm(_ deviceId: Swift.String, cdate: Swift.String, ctss: [Swift.String], complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func getCameraReslutionArray(_ deviceId: Swift.String) -> [AJLibrary.QualityModel]?
  @objc public func getDefaultCameraReslutionNum(_ deviceId: Swift.String) -> Swift.String?
  @objc public func getDualLensCameraReslutionArray(_ deviceId: Swift.String) -> [AJLibrary.QualityModel]?
  @objc public func getQuadScreenDefaultCameraReslutionNum(_ deviceId: Swift.String) -> Swift.String?
  @objc public func updateCameraReslutionArray(_ deviceId: Swift.String, capabilitySTR: Swift.String) -> [AJLibrary.QualityModel]?
  @objc public func getCameraAccessKey(_ deviceId: Swift.String) -> Swift.String?
  @objc public func cameraOnlyHaveOneStream(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func getCameraLightMode(_ deviceId: Swift.String) -> Swift.String?
  @objc public func cameraIsSupportPtz(_ deviceId: Swift.String) -> Swift.String?
  @objc public func cameraIsSupportFeeding(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraIsSupportFloodlight(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraIsSupportFloodlightBrightnessChange(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraIsSupportFloodlightTimeControl(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraIsSupportAlarmWhistle(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraIsSupportdualLens(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraCognitiveTypes(_ deviceId: Swift.String) -> Swift.String?
  @objc public func cameraIsSupportPrivLiveStream(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraAlarmWhistleIsOn(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraAlarmWhistlePIRIsOn(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraAlarmWhistlePIRUpdate(_ deviceId: Swift.String, isON: Swift.String)
  @objc public func cameraAlarmWhistleupdate(_ deviceId: Swift.String, isON: Swift.String)
  @objc public func cameraFloodlightIsOn(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func foodIsEmpty(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func foodisEmptyDescLabel(_ deviceId: Swift.String) -> UIKit.UIView
  @objc public func cameraFloodlightAutoIsOn(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraIsSupportdualScreen_realLens(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraVenderCode(_ deviceId: Swift.String) -> Swift.String?
  @objc public func cameraFloodlightTimeIsOn(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraFloodlightBrightness(_ deviceId: Swift.String) -> Swift.Int
  @objc public func cameraIsSupportWhiteLightCtrl(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraIsSupportOpticalZoom(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraIsSupportRemoteTF(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraIsSupportVariFocus(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraIsSupportDuplexVoice(_ deviceId: Swift.String) -> Foundation.NSNumber
  @objc public func cameraIsSupportSpeaker(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraIsSupportMicrophone(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraStatusIsOK(_ deviceId: Swift.String) -> Foundation.NSNumber
  public func cameraStatusIsBad(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraIsInLocalNetwork(_ deviceId: Swift.String, complete: @escaping (Foundation.NSNumber?) -> Swift.Void)
  @objc public func getCameraLocalNetwork(_ deviceId: Swift.String) -> Swift.String?
  @objc public func getCameraLocalDirectProbeUrl(_ deviceId: Swift.String) -> Swift.String?
  @objc public func getCameraWanIP(_ deviceId: Swift.String) -> Swift.String?
  @objc public func getAppWanIP() -> Swift.String?
  @objc public func cameraPtzControl(_ deviceId: Swift.String, direction: Swift.String)
  @objc public func cameraViewAngleConfig(_ deviceId: Swift.String, viewAngle: Swift.String, name: Swift.String, complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func cameraViewAngleDele(_ deviceId: Swift.String, viewAngles: [Swift.String], complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func cameraIsSupportSimCard(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cameraViewAngleTurn(_ deviceId: Swift.String, viewAngle: Swift.String)
  @objc public func getAlarmsCalendar(_ deviceId: Swift.String, complete: @escaping ([Swift.String]?, Swift.String?) -> Swift.Void)
  @objc public func getFeedLogs(_ deviceId: Swift.String, ctime: Swift.String, limit: ObjectiveC.NSInteger, complete: @escaping (AJLibrary.feedLogsModel?, Swift.String?) -> Swift.Void)
  @objc public func getCameraTzvalue(_ deviceId: Swift.String) -> Swift.String?
  @objc public func getAlarmList(_ deviceId: Swift.String, cdate: Swift.String, limit: ObjectiveC.NSInteger, isToday: ObjectiveC.NSInteger, isTodayFirst: ObjectiveC.NSInteger, ctime: ObjectiveC.NSInteger, complete: @escaping (AJLibrary.AlarmListModel?, Swift.String?) -> Swift.Void)
  @objc public func getCurrentAngleList() -> [AJLibrary.ViewAngle]?
  @objc public func updateCameraInfo(_ deviceId: Swift.String, complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func updateCameraInfo(_ deviceId: Swift.String, configName: Swift.String, complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func currentCameraIsOnline() -> Foundation.NSNumber?
  @objc public func currentCameraIsSupportUPNP() -> Swift.String?
  @objc public func cameraIsSupportUPNP(_ deviceId: Swift.String) -> Swift.String?
  @objc public func cameraIsOnline(_ deviceId: Swift.String) -> Foundation.NSNumber?
  @objc public func currentCameraTFStatus() -> Swift.String?
  @objc public func CameraTFStatus(_ deviceId: Swift.String) -> Swift.String?
  @objc public func TFEnableStatus(_ deviceId: Swift.String) -> Swift.String?
  @objc public func cameraType(_ deviceId: Swift.String) -> Swift.String?
  @objc public func DeviceIsBatteryCam(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func DeviceWifiSignal(_ deviceId: Swift.String) -> Swift.Int
  @objc public func currentCameraPlanIsVaild() -> Foundation.NSNumber?
  @objc public func CameraPlanIsVaild(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func isInValidAiPlan(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func CameraIsLowPower(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func cloudPlanHaveAvailableDevice(_ orderInfo: AJLibrary.OrderModel) -> Foundation.NSNumber?
  @objc public func getCloudPlanKeepDays(_ deviceId: Swift.String) -> Swift.Int
  @objc public func DevicePlanIsValid(_ deviceId: Swift.String) -> Swift.Bool
  @objc public func GateWaySubDevices(_ deviceId: Swift.String) -> [Swift.String]
  @objc public func batterySingleWakeUp(_ deviceId: Swift.String, complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func whiteLightConfig(_ deviceId: Swift.String, lightMode: Swift.Int, complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func cameraFloodlightCtrl(_ deviceId: Swift.String, isOn: Swift.Bool, brightness: Swift.String, complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func FeedManuallyCtntrol(_ deviceId: Swift.String, feedQuantity: Swift.String, complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func FeedTimingConfig(_ deviceId: Swift.String, timings: [AJLibrary.timingsModel], complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func sirenCtrl(_ deviceId: Swift.String, isOn: Swift.Bool, complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func sirenAutoCtrl(_ deviceId: Swift.String, isOn: Swift.String, complete: @escaping (Swift.String?) -> Swift.Void)
  @objc public func fetchCloudPlanList(refresh: Swift.Bool = false, supportDevType: Swift.Int = IPCSupportDevType, saleRegion: Swift.Int = CloudSaleRegion, complete: @escaping (AJLibrary.CloudPlansModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func getWeekdaysText(_ weekDays: [Swift.String]) -> Swift.String
  @objc public func fetchOrderList_ex(refresh: Swift.Bool = false, masterUid: Swift.String? = nil, supportDevType: Swift.Int = IPCSupportDevType, status: [Swift.String], complete: @escaping (AJLibrary.OrdersModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc public func fetchOrderStatus(deviceId: Swift.String, complete: @escaping (AJLibrary.OrderStatusModel?, AJLibrary.ErrorModel?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class UIMaterialTextField : Material.TextField {
  @_Concurrency.MainActor(unsafe) public var allToRed: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var detailToRed: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(_ placeholder: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func showError(_ detail: Swift.String)
  @_Concurrency.MainActor(unsafe) public func hideError()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CloudWebViewController : AJLibrary.CustomWebViewController, WebKit.WKScriptMessageHandler, MessageUI.MFMailComposeViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public var order: AJLibrary.OrderModel?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc public func mailComposeController(_ controller: MessageUI.MFMailComposeViewController, didFinishWith result: MessageUI.MFMailComposeResult, error: (any Swift.Error)?)
  @_Concurrency.MainActor(unsafe) @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc @_Concurrency.MainActor(unsafe) public func loadCloudStorage()
  @_Concurrency.MainActor(unsafe) @objc override public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc deinit
  @_Concurrency.MainActor(unsafe) override public init(urlRequest: Foundation.URLRequest, configuration: WebKit.WKWebViewConfiguration = super, activities: [UIKit.UIActivity]? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(CountryModel) public class CountryModel : AJLibrary.ResultModel, Foundation.NSCoding {
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension AJLibrary.NetHTTPMethod : Swift.Equatable {}
extension AJLibrary.NetHTTPMethod : Swift.Hashable {}
extension AJLibrary.NetHTTPMethod : Swift.RawRepresentable {}
extension AJLibrary.LoginType : Swift.Equatable {}
extension AJLibrary.LoginType : Swift.Hashable {}
extension AJLibrary.LoginType : Swift.RawRepresentable {}
extension AJLibrary.ReceiveStatus : Swift.Equatable {}
extension AJLibrary.ReceiveStatus : Swift.Hashable {}
extension AJLibrary.ReceiveStatus : Swift.RawRepresentable {}
extension AJLibrary.CameraStatus : Swift.Equatable {}
extension AJLibrary.CameraStatus : Swift.Hashable {}
extension AJLibrary.CameraStatus : Swift.RawRepresentable {}
extension AJLibrary.AutoLightMode : Swift.Equatable {}
extension AJLibrary.AutoLightMode : Swift.Hashable {}
extension AJLibrary.AutoLightMode : Swift.RawRepresentable {}
extension AJLibrary.ShakeDirection : Swift.Equatable {}
extension AJLibrary.ShakeDirection : Swift.Hashable {}
extension AJLibrary.ShakeDirection : Swift.RawRepresentable {}
extension AJLibrary.ImageType : Swift.Equatable {}
extension AJLibrary.ImageType : Swift.Hashable {}
extension AJLibrary.ImageType : Swift.RawRepresentable {}
extension AJLibrary.InviteStatus : Swift.Equatable {}
extension AJLibrary.InviteStatus : Swift.Hashable {}
extension AJLibrary.InviteStatus : Swift.RawRepresentable {}
extension AJLibrary.DeviceModeType : Swift.Equatable {}
extension AJLibrary.DeviceModeType : Swift.Hashable {}
extension AJLibrary.DeviceModeType : Swift.RawRepresentable {}
extension AJLibrary.ConAcountType : Swift.Equatable {}
extension AJLibrary.ConAcountType : Swift.Hashable {}
extension AJLibrary.ConAcountType : Swift.RawRepresentable {}
extension AJLibrary.ShareDeviceStatus : Swift.Equatable {}
extension AJLibrary.ShareDeviceStatus : Swift.Hashable {}
extension AJLibrary.ShareDeviceStatus : Swift.RawRepresentable {}
extension AJLibrary.FileFolder : Swift.Equatable {}
extension AJLibrary.FileFolder : Swift.Hashable {}
extension AJLibrary.FileFolder : Swift.RawRepresentable {}
extension AJLibrary.DownloadStatus : Swift.Equatable {}
extension AJLibrary.DownloadStatus : Swift.Hashable {}
extension AJLibrary.DownloadStatus : Swift.RawRepresentable {}
extension AJLibrary.NetEntrance : Swift.Equatable {}
extension AJLibrary.NetEntrance : Swift.Hashable {}
extension AJLibrary.NetConfigurationType : Swift.Equatable {}
extension AJLibrary.NetConfigurationType : Swift.Hashable {}
extension AJLibrary.NetConfigurationType : Swift.RawRepresentable {}
extension AJLibrary.SupportLanguageOption : Swift.Equatable {}
extension AJLibrary.SupportLanguageOption : Swift.Hashable {}
extension AJLibrary.SupportLanguageOption : Swift.RawRepresentable {}
extension AJLibrary.AlarmType : Swift.Equatable {}
extension AJLibrary.AlarmType : Swift.Hashable {}
extension AJLibrary.AlarmType : Swift.RawRepresentable {}
extension AJLibrary.DeviceModeOption : Swift.Equatable {}
extension AJLibrary.DeviceModeOption : Swift.Hashable {}
extension AJLibrary.DeviceModeOption : Swift.RawRepresentable {}
extension AJLibrary.ProductNameType : Swift.Equatable {}
extension AJLibrary.ProductNameType : Swift.Hashable {}
extension AJLibrary.ProductNameType : Swift.RawRepresentable {}
extension AJLibrary.EMCAction : Swift.Equatable {}
extension AJLibrary.EMCAction : Swift.Hashable {}
extension AJLibrary.EMCAction : Swift.RawRepresentable {}
extension AJLibrary.BindStatus : Swift.Equatable {}
extension AJLibrary.BindStatus : Swift.Hashable {}
extension AJLibrary.BindStatus : Swift.RawRepresentable {}
extension AJLibrary.OrderStatusEnum : Swift.Equatable {}
extension AJLibrary.OrderStatusEnum : Swift.Hashable {}
extension AJLibrary.OrderStatusEnum : Swift.RawRepresentable {}
extension AJLibrary.OrderType : Swift.Equatable {}
extension AJLibrary.OrderType : Swift.Hashable {}
extension AJLibrary.OrderType : Swift.RawRepresentable {}
extension AJLibrary.OnlineSetResult : Swift.Equatable {}
extension AJLibrary.OnlineSetResult : Swift.Hashable {}
extension AJLibrary.OnlineSetResult : Swift.RawRepresentable {}
